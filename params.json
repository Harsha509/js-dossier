{
  "name": "Dossier",
  "tagline": "A JavaScript documentation generation tool.",
  "body": "# Dossier\r\n\r\nDossier is a [JSDoc](http://en.wikipedia.org/wiki/JSDoc) parsing tool built on\r\ntop of the [Closure Compiler](https://developers.google.com/closure/compiler/).\r\nDossier uses the compiler to parse your code and build a type graph. It then\r\ntraverses the graph to find types to generate documentation for. Proper use of\r\nClosure's [annotations](https://developers.google.com/closure/compiler/docs/js-for-compiler)\r\nwill not only improve the type-checking and optimizations of the Closure\r\nCompiler, but will also improve Dossier's ability to generate meaningful documentation.\r\n\r\n## Usage\r\n\r\n_Dossier requires [Java 7](http://openjdk.java.net/) or newer_\r\n\r\n```sh\r\njava -jar dossier.jar -c config.json\r\n```\r\n\r\nWhere `config.json` is a configuration file with the options listed below.\r\n\r\n__Configuration Options__\r\n\r\n * `closureDepFiles` Path to a file to parse for calls to `goog.addDependency`.\r\n    This option requires also setting `closureLibraryDir`.\r\n\r\n * `closureLibraryDir` Path to the base directory of the Closure library (which\r\n    must contain base.js and deps.js). When this option is specified, Closure's\r\n    deps.js and all of the files specified by `closureDepsFile` will be parsed\r\n    for calls to `goog.addDependency`. The resulting map will be used to\r\n    automatically expand the set of `sources` any time a symbol is\r\n    goog.require'd with the ile that goog.provides that symbol, along with all\r\n    of its transitive dependencies.\r\n\r\n    For example, suppose you have one source file, `foo.js`:\r\n\r\n   ```js\r\n   goog.require('goog.array');\r\n   // ...\r\n   ```\r\n\r\n    and your configuration includes:\r\n\r\n   ```json\r\n   \"sources\": [\"foo.js\"],\r\n   \"closureLibraryDir\": \"closure/goog\"\r\n   ```\r\n\r\n    due to the dependencies of goog.array declared in closure/goog/deps.js,\r\n    this is equivalent to the following configuration:\r\n\r\n   ```json\r\n   \"sources\": [\r\n       \"closure/goog/base.js\",\r\n       \"closure/goog/debug/error.js\",\r\n       \"closure/goog/string/string.js\",\r\n       \"closure/goog/asserts/asserts.js\",\r\n       \"closure/goog/array/array.js\",\r\n       \"foo.js\"\r\n   ]\r\n   ```\r\n\r\n    Notice specifying `closureLibraryDir` instructs Dossier to sort the input\r\n    files so a a file that goog.provides symbol X comes before any file that\r\n    goog.requires X.\r\n\r\n * `customPages` List of additional files to include in the generated\r\n    documentation. Each page is defined as a {name: string, path: string}\r\n    object, where the name is what's displayed in the navigation menu, and\r\n    `path` is the path to the markdown file to use. Files will be included in\r\n    the order listed, after the standard navigation items.\r\n\r\n * `excludes` A list of .js files to exclude from processing. If a directory is\r\n    specified, all of the .js files under that directory will be excluded. A\r\n    glob pattern may also be specified to exclude all of the paths under the\r\n    current working directory that match  the provided pattern.\r\n\r\n * `externModules` A list of .js files to include as CommonJS extern module\r\n    definitions. Each module may be required in source by the file's base name,\r\n    excluding the extension. For example, 'extern/libfoo.js' would provide the\r\n    extern definition for the import `require('libfoo');`\r\n\r\n * `externs` A list of .js files to include as an extern file for the Closure\r\n    compiler. These  files are used to satisfy references to external types,\r\n    but are excluded when generating  API documentation.\r\n\r\n * `language` Specifies which version of ECMAScript the input sources conform\r\n    to. Defaults to ES6_STRICT. Must be one of {ES3, ES5, ES5_STRICT, ES6,\r\n    ES6_STRICT}\r\n\r\n * `moduleFilters` List of regular expressions for modules that should be\r\n    excluded from generated documentation, even if found in the type graph. The\r\n    provided expressions will be to the _absolute_ path of the source file for\r\n    each module.\r\n\r\n * `moduleNamingConvention` The module naming convention to use. If set to\r\n    `NODE`, modules with a basename of index.js will use the name of the parent\r\n    directory (e.g. \"foo/bar/index.js\" -> \"foo/bar/\"). Must be one of {ES6,\r\n    NODE}; defaults to ES6\r\n\r\n * `modulePrefix` A prefix to strip from every module's path when generating\r\n    documentation. The specified path must be a directory that is an ancestor\r\n    of every file specified in `modules`. Note: if this option is omitted, the\r\n    closest common ancestor for all module files will be selected as the\r\n    default.\r\n\r\n * `modules` A list of .js files to extract API documentation from. Each file\r\n    will be processed as a CommonJS module, with only its exported API included\r\n    in the generated output. If a glob pattern is specified, every .js file\r\n    under the current directory matching that pattern will be included.\r\n    Specifying the path to a directory, `foo`, is the same as the glob pattern\r\n    `foo/**.js`. The set of paths specified by this option *mut* be disjoint\r\n    from those specified by `sources`.\r\n\r\n * `output` Path to the directory to write all generated documentation to. This\r\n    field is required.\r\n\r\n * `readme` Path to a README file to include as the main landing page for the\r\n    generated documentation. This file should use markdown syntax.\r\n\r\n * `sourcePrefix` A prefix to strip from every input file's path (source &\r\n    module) when rendering source paths. Notably, paths will be inserted into\r\n    the source URL template after this prefix has been removed. If this option\r\n    is omitted, the closest common ancestor for all input files will be used as\r\n    the default.\r\n\r\n * `sourceUrlTemplate` Specifies a template from which to generate a HTTP(S)\r\n    links to source files. Within this template, the `%path%` and `%line%`\r\n    tokens will be replaced with the linked type's source file path and line\r\n    number, respectively. Source paths will be relative to the closest common\r\n    ancestor of all input files.\r\n\r\n    If this option is not specified, a rendered copy of each input file will be\r\n    included in the generated output.\r\n\r\n * `sources` A list of .js files to extract API documentation from. If a glob\r\n    pattern is specified, every .js file under the current working directory\r\n    matching that pattern will be included. Specifying the path to a directory,\r\n    `foo`, is the same as using the glob pattern `foo/**.js`. The set of paths\r\n    specified by this option *must* be disjoint from those specified by\r\n    `modules`.\r\n\r\n * `strict` Whether to run with all type checking flags enabled.\r\n\r\n * `typeFilters` List of regular expressions for types that should be excluded\r\n    from generated documentation, even if found in the type graph.\r\n\r\n\r\n## ES6 Support\r\n\r\nDossier supports ES6 code insofar as the [Closure Compiler](https://github.com/google/closure-compiler/wiki/ECMAScript6)\r\ndoes. Since the compiler transpiles ES6 to ES5 for analysis, there is some\r\ninformation loss with Dossier. Most notably, type information is lost for\r\n`Symbol` types and generator functions. To use Dossier with ES6 code, in your\r\nconfiguration file, simply set the input `language` to `ES6` or\r\n`ES6_STRICT` (which is the default).\r\n\r\n### Module Support\r\n\r\nDossier currently recognizes three types of JavaScript modules:\r\n\r\n1. Closure modules identified by `goog.module(id)` declaration\r\n2. ES6 modules identified by the use of an `export` or `import` declaration\r\n3. Node-style CommonJS modules\r\n\r\nNode modules must be explicitly declared as `modules` inputs in your\r\nconfiguration file so Dossier knows to look for `require()` and\r\n`exports` expressions.\r\n\r\nFor Node and ES6 modules, you may import other modules by their _relative_\r\npath:\r\n\r\n```js\r\nimport {Foo as Bar} from './lib';  // ES6\r\nconst Baz = require('./dir/lib');  // Node\r\n```\r\n\r\nRefer to the section on [type linking](#type-linking) below for information\r\non how to refer to imported types within a JSDoc comment.\r\n\r\n## Formatting\r\n\r\nBefore generating the final HTML output, Dossier runs all comments through a\r\n[CommonMark](http://commonmark.org/) parser. Since markdown is sensitive to the\r\nleading whitespace on each line, care must be taken with comment formatting.\r\nComments are extracted from the source according to the follow rules:\r\n\r\n1. The `/**` on the opening line is removed; all subsequent content is\r\n   considered part of the comment.\r\n2. On each subsequent line, all whitespace up to the first non-space character\r\n   is removed.\r\n3. If the first character on a line after removing whitespace is a `*`, it\r\n   is removed from the line. All subsequent content is considered part of the\r\n   comment.\r\n4. On the final line, the closing `*/` is removed.\r\n\r\nFor example, the JSDoc comment (.'s inserted to highlight whitespace)\r\n\r\n```js\r\n/**\r\n.*.Line one.\r\n.*.Line two.\r\n.*\r\n.*.* list item one\r\n.*.* line item two\r\n.*\r\n.*.....code block\r\n.*/\r\n```\r\n\r\nis passed to the parser as\r\n\r\n```\r\n.Line one.\r\n.Line two.\r\n\r\n.* list item one\r\n.* list item two\r\n\r\n.....code block\r\n```\r\n\r\nWhen applied to comments attached to annotations, the same rules apply, except\r\nthe comment text starts after the annotation, type, or name (as applicable for\r\nthe annotation). For instance,\r\n\r\n```js\r\n/**\r\n * @param {string} x This is the comment for\r\n *     parameter x.\r\n */\r\n```\r\n\r\nthe comment string parsed for parameter `x` is (again, .'s inserted to denote\r\nleading whitespace):\r\n\r\n```\r\n.This is the comment for\r\n.....parameter x.\r\n```\r\n\r\n### The `@code` and `@literal` Taglets\r\n\r\nThe `@code` and `@literal` taglets may be used to specify text that\r\nshould be HTML escaped for rendering; the `@code` taglet will wrap its\r\noutput in `<code>` tags. For example, the following\r\n\r\n```js\r\n{@code 1 < 2 && 3 < 4;}\r\n```\r\n\r\nwill produce\r\n\r\n```html\r\n<code>1 &lt; 2 &amp;&amp; 3 &lt; 4;</code>\r\n```\r\n\r\n### Type Linking <a name=\"type-linking\"></a>\r\n\r\nDossier uses the `@link` and `@linkplain` taglets to generate links to\r\nnamed types (`@link` will generate `<code>` formatted links).  The taglet\r\ncontents up to the first space are parsed as the type name and everything after\r\nthe space is the link text. If there is no text within the taglet, the type\r\nname will be used. For example, suppose there is a type named\r\n`example.Widget`, then\r\n\r\n```\r\nAn {@link example.Widget} link.\r\nA {@link example.Widget widget link}.\r\n```\r\n\r\nwould produce\r\n\r\n```html\r\nAn <a href=\"path/to/example.Widget.html\"><code>example.Widget</code></a> link.\r\nA <a href=\"path/to/example.Widget.html\"><code>widget link</code></a>.\r\n```\r\n\r\nYou may use a hash tag (#) to reference a type's property inside a link:\r\n`{@link example.Widget#build()}`. You may omit the type's name\r\nas a qualifier when linking to one of its own properties:\r\n`{@link #build()}`. Dossier will favor instance over static\r\nproperties when de-referencing a hash link.\r\n\r\nDossier tracks type aliases so your documentation may reflect the actual source.\r\nFor instance, if you import a type from a module, you may refer to that type\r\nby its imported alias:\r\n\r\n```js\r\nimport {Widget as Whatsit} from './lib';\r\n\r\n/** A {@link Whatsit} object. */\r\nexport const w = new Whatsit;\r\n```\r\n\r\nHere, the comment on the exported `w` property produces\r\n\r\n```html\r\n<p>A <a href=\"module/lib_exports_Widget\"><code>Whatsit</code></a> object.</p>\r\n```\r\n\r\nWhen using the [revealing module pattern](https://carldanley.com/js-revealing-module-pattern/),\r\nyour module's documentation can refer to a type by its internal name and\r\nDossier will generate a link to the exported type.\r\n\r\n```js\r\nclass Widget {}\r\n\r\n/** A factory that generates {@link Widget} objects. */\r\nclass WidgetFactory {}\r\n\r\nexport {Widget as WhatsIt, WidgetFactory}\r\n```\r\n\r\nIn the above, since `Widget`'s public name is `WhatsIt`, the generate\r\ndocumentation would be (extra newlines inserted for readability)\r\n\r\n```html\r\n<p>A factory that generates\r\n<a href=\"module/lib_exports_WhatsIt.html\"><code>Widget</code></a> objects.\r\n</p>\r\n```\r\n\r\nWithin an ES6 or Node module, you may refer to another module without importing\r\nusing the module's _relative_ path as your type symbol. To refer to an exported\r\ntype from another module, simply qualify it with the module's relative path.\r\n\r\n```js\r\n/** A link to module {@link ./foo/bar} */\r\n/** A link to type {@link ./foo/bar.Baz} */\r\n```\r\n\r\n### The `@see` Annotation\r\n\r\nUse the `@see` annotation in your JSDoc to add a reference to another\r\ntype or an external resource. The text context following the annotation is\r\nprocessed in the following order:\r\n\r\n1. The annotation contents are processed as a type link using the rules defined\r\n   in the previous section. If the contents define a valid reference to another\r\n   type or property, a link will be included in the HTML output.\r\n2. If the annotation is a well-formed http or https URL, it will be rendered as\r\n   a link.\r\n3. Otherwise, the contents of the annotation are processed as markdown like a\r\n   comment's main body.\r\n\r\n\r\n__Example__\r\n\r\n```js\r\nclass Greeter {\r\n  /** @param {!Person} person . */\r\n  greet(person) {}\r\n}\r\n\r\n/**\r\n * @see Greeter\r\n * @see #name\r\n * @see http://www.example.com\r\n */\r\nclass Person {\r\n  /** @return {string} . */\r\n  name() { return ''; }\r\n}\r\n```\r\n\r\nIn this example, the `@see` annotations on the `Person` class would\r\ngenerate the following links:\r\n\r\n```html\r\n<a href=\"Greeter.html\"><code>Greeter</code></a>\r\n<a href=\"Person.html#name\"><code>#name</code></a>\r\n<a href=\"http://www.example.com\">http://www.example.com</a>\r\n```\r\n\r\n## HTML Sanitization\r\n\r\nAll HTML output is sanitized using the [owasp HTML sanitizer](https://github.com/owasp/java-html-sanitizer).\r\nRefer to the [source](https://github.com/jleyba/js-dossier/blob/master/src/java/com/github/jsdossier/soy/HtmlSanitizer.java)\r\nfor an up-to-date list of the supported HTML tags and attributes.\r\n\r\n## Building\r\n\r\nDossier is built using [Bazel](http://bazel.io/). Once\r\nyou have [installed](http://bazel.io/docs/install.html) Bazel,\r\nyou can use the `gendossier.sh` script to complete various actions:\r\n\r\n```\r\n./gendossier.sh -h\r\n```\r\n\r\n## LICENSE\r\n\r\nCopyright 2013-2015 Jason Leyba\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}