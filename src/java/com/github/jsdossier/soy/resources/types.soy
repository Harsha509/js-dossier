{namespace dossier.soy.type}

/**
 * Entry point to rendering a type expression.
 */
{template .expression}
  {@param expression: dossier.expression.TypeExpression}

  <code class="expression">
    {call .expression_ data="all" /}
  </code>
{/template}


/**
 * Renders a reference to a specific type.
 */
{template .typeReference}
  {@param type: dossier.expression.NamedType}
  {@param? useQualifiedName: bool}

  <code class="expression">
    {call .namedTypeReference data="all" /}
  </code>
{/template}


/**
 * Renders a single type link.
 */
{template .typeLink}
  {@param content: string|html}
  {@param link: dossier.expression.TypeLink}
  {@param? target: string}
  {@param? title: string}
  {@param? codeLink: bool}
  {@param? tabIndex: int}
  {@param? classes: string}

  <a href="{$link.href}"
     {if $target}{sp}target="{$target}"{/if}
     {if $title}{sp}title="{$title}"{/if}
     {if $tabIndex}{sp}tabIndex="{$tabIndex}"{/if}
     {if $classes}{sp}class="{$classes}"{/if}
     >
   {if $codeLink}
    <code>{$content}</code>
   {else}
     {$content}
   {/if}
  </a>
{/template}


/**
 * Renders a type expression that is the result of another operation (function or
 * property reference).
 *
 * Example:      $OPERATION ⇒ $EXPRESSION
 */
{template .yields}
  {@param expression: dossier.expression.TypeExpression}

  {call .yields_ /}
  {call .expression data="all" /}
{/template}


/** Render a yields delimiter. */
{template .yields_ private="true"}
  {sp}<var class="yield">→</var>{sp}  // Or ⇒?
{/template}


/**
 * Renders an expression indicating an expression yields void.
 */
{template .yieldsVoid}
  {call .yields_ /}
  <code class="expression"><i>void</i></code>
{/template}

/**
 * Renders an expression indicating an expression has an unknown resulting type.
 */
{template .yieldsUnknown}
  {call .yields_ /}
  <code class="expression"><i>?</i></code>
{/template}


/**
 * Renders a type expression.
 */
{template .expression_ private="true"}
  {@param expression: dossier.expression.TypeExpression}
  {@param? undefinedAsVoid: bool}

  {if $expression.isVarargs}...{/if}

  {if $expression.functionType}{call .functionType data="all" /}
  {elseif $expression.namedType}
    {call .namedTypeReference}
      {param type: $expression.namedType /}
    {/call}
  {elseif $expression.recordType}{call .recordType data="all" /}
  {elseif $expression.unionType}{call .unionType data="all" /}
  {elseif $expression.anyType}*
  {elseif $expression.unknownType}?
  {elseif $expression.voidType}{if $undefinedAsVoid}void{else}undefined{/if}
  {elseif $expression.nullType}null
  {/if}
{/template}


/**
 * Renders a function type.
 */
{template .functionType private="true"}
  {@param expression: dossier.expression.TypeExpression}
  {let $fn: $expression.functionType /}

  function(
  {if $fn.instanceType}
    {if $fn.isConstructor}new{else}this{/if}
    :{sp}
    {call .expression_}
      {param expression: $fn.instanceType /}
    {/call}
    {if length($fn.parameter)},{sp}{/if}
  {/if}
  {foreach $param in $fn.parameter}
    {call .expression_}
      {param expression: $param /}
    {/call}
    {if not isLast($param)},{sp}{/if}
  {/foreach}
  )
  {if $fn.returnType}
    :{sp}
    {call .expression_}
      {param expression: $fn.returnType /}
    {/call}
  {/if}
{/template}


/**
 * Renders a named type reference.
 */
{template .namedTypeReference private="true"}
  {@param type: dossier.expression.NamedType}
  {@param? useQualifiedName: bool}

  {let $text kind="text"}
    {if $useQualifiedName and $type.qualifiedName}
      {$type.qualifiedName}
    {else}
      {$type.name}
    {/if}
  {/let}

  {let $title kind="text"}
    {if $type.qualifiedName
        and $type.qualifiedName != $type.name
        and not $useQualifiedName}
      {$type.qualifiedName}
    {/if}
  {/let}

  {if $type.link}
    {call .typeLink}
      {param content: $text /}
      {param link: $type.link /}
      {param target: $type.extern ? '_blank' : '' /}
      {param title: $title /}
    {/call}
  {else}
    {$text}
  {/if}

  {if length($type.templateType)}
    &lt;
    {foreach $template in $type.templateType}
      {call .expression_}
        {param expression: $template /}
      {/call}
      {if not isLast($template)},{sp}{/if}
    {/foreach}
    &gt;
  {/if}
{/template}


/**
 * Renders a named type expression.
 */
{template .namedTypeExpression private="true"}
  {@param expression: dossier.expression.TypeExpression}
  {call .namedTypeReference}
    {param type: $expression.namedType /}
  {/call}
{/template}


/**
 * Renders a record type expression.
 */
{template .recordType private="true"}
  {@param expression: dossier.expression.TypeExpression}

  {lb}
  {foreach $entry in $expression.recordType.entry}
    {$entry.key}:{sp}
    {call .expression_}
      {param expression: $entry.value /}
    {/call}
    {if not isLast($entry)},{sp}{/if}
  {/foreach}
  {rb}
{/template}


/**
 * Renders a union type.
 */
{template .unionType private="true"}
  {@param expression: dossier.expression.TypeExpression}

  (
  {foreach $alternate in $expression.unionType.type}
    {call .expression_}
      {param expression: $alternate /}
    {/call}
    {if not isLast($alternate)}|{/if}
  {/foreach}
  )
{/template}
