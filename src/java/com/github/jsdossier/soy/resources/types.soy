{namespace dossier.soy.types}

/**
 * Renders a type expression.
 */
{template .expression}
  {@param expression: dossier.expression.TypeExpression}
  {@param? strict: bool}

  {if $expression.isVarargs}...{/if}

  {if $expression.functionType}{call .functionType data="all" /}
  {elseif $expression.namedType}{call .namedType data="all" /}
  {elseif $expression.recordType}{call .recordType data="all" /}
  {elseif $expression.unionType}{call .unionType data="all" /}
  {elseif $expression.anyType}*
  {elseif $expression.unknownType}?
  {elseif $expression.voidType}void
  {/if}
{/template}


/**
 * Renders a function type.
 */
{template .functionType private="true"}
  {@param expression: dossier.expression.TypeExpression}
  {let $fn: $expression.functionType /}

  function(
  {if $fn.instanceType}
    {if $fn.isConstructor}new{else}this{/if}
    :{sp}
    {call .expression}
      {param expression: $fn.instanceType /}
    {/call}
    {if length($fn.parameter)},{sp}{/if}
  {/if}
  {foreach $param in $fn.parameter}
    {call .expression}
      {param expression: $param /}
      {param strict: true /}
    {/call}
    {if not isLast($param)},{sp}{/if}
  {/foreach}
  )
  {if $fn.returnType}
    :{sp}
    {call .expression}
      {param expression: $fn.returnType /}
      {param strict: true /}
    {/call}
  {/if}
{/template}


/**
 * Renders a named type expression.
 */
{template .namedType private="true"}
  {@param expression: dossier.expression.TypeExpression}
  {@param? strict: bool}
  {let $type: $expression.namedType /}
  {let $isPrimitive: $type.name == 'boolean'
                     or $type.name == 'number'
                     or $type.name == 'string' /}

  {if $strict}
    {if $expression.allowNull and $isPrimitive}
      ?
    {elseif not $expression.allowNull and not $isPrimitive}
      !
    {/if}
  {/if}
  {if $type.href}
    <a href="{$type.href}">
  {/if}
  {$type.name}
  {if $type.href}
    </a>
  {/if}
  {if length($type.templateType)}
    &lt;
    {foreach $template in $type.templateType}
      {call .expression}
        {param expression: $template /}
        {param strict: $strict /}
      {/call}
      {if not isLast($template)},{sp}{/if}
    {/foreach}
    &gt;
  {/if}
{/template}


/**
 * Renders a record type expression.
 */
{template .recordType private="true"}
  {@param expression: dossier.expression.TypeExpression}

  {lb}
  {foreach $entry in $expression.recordType.entry}
    {$entry.key}:{sp}
    {call .expression}
      {param expression: $entry.value /}
      {param strict: true /}
    {/call}
    {if not isLast($entry)},{sp}{/if}
  {/foreach}
  {rb}
{/template}


/**
 * Renders a union type.
 */
{template .unionType private="true"}
  {@param expression: dossier.expression.TypeExpression}
  {@param? strict: bool}

  {let $union: $expression.unionType /}
  {let $allowNull: $expression.allowNull /}
  {let $allowUndefined: $expression.allowUndefined and not $expression.isVarargs /}
  {let $renderParens: length($union.type) > 1 or $allowNull or $allowUndefined /}

  {if $strict and not $allowNull}
    {if length($union.type) != 1
        or not $union.type[0].namedType
        or not ($union.type[0].namedType.name == 'boolean'
                or $union.type[0].namedType.name == 'number'
                or $union.type[0].namedType.name == 'string')}
      !
    {/if}
  {/if}
  {if $renderParens}({/if}
  {foreach $alternate in $union.type}
    {call .expression}
      {param expression: $alternate /}
    {/call}
    {if not isLast($alternate)}|{/if}
  {/foreach}
  {if $allowNull}|null{/if}
  {if $allowUndefined}|undefined{/if}
  {if $renderParens}){/if}
{/template}
