{namespace dossier.soy}

/**
 * Renders a block comment.
 */
{template .comment}
  {@param comment: dossier.Comment}
  {@param? ensureParagraph: bool}

  {if $comment and length($comment.token)}
    {let $renderParagraph: $ensureParagraph
                           and length($comment.token) == 1
                           and not $comment.token[0].html /}

    {if $renderParagraph}
      <p>
    {/if}
    {foreach $token in $comment.token}
      {if $token.link and $token.link.href}
        {call dossier.soy.type.typeLink}
          {param link: $token.link /}
          {param content kind="html"}
            {if $token.text}{$token.text}{/if}
            {if $token.html}{$token.html}{/if}
          {/param}
        {/call}
      {else}
        {if $token.text}{$token.text}{/if}
        {if $token.html}{$token.html}{/if}
      {/if}
    {/foreach}
    {if $renderParagraph}
      </p>
    {/if}
  {/if}
{/template}


/**
 * Renders a single card.
 */
{template .renderCard private="true"}
  {@param className: string}
  {@param? id: string}
  {@param header: html}
  {@param body: html}
  {@param source: dossier.SourceLink}

  <section class="{$className}" {if $id}{sp}id="{$id}"{/if}>
    <div class="header">
      {$header}
    </div>
    <div class="body">
      {$body}
      {if $source and ($source.uri or $source.path)}
        <div class="source">
          {if $source.uri}
            <a href="{$source.uri}" target="_blank" title="View source">VIEW SOURCE</a>
          {else}
            <a href="{$source.path}{if $source.line and $source.line > 0}#l{$source.line}{/if}"
                title="View source">VIEW SOURCE</a>
          {/if}
        </div>
      {/if}
    </div>
  </section>
{/template}


/**
 * Renders a single row in an info table.
 */
{template .infoRow private="true"}
  {@param? title: html}
  {@param cell1: html}
  {@param? cell2: html}
  {@param? id: string}
  {@param? block: bool}

  <tr class="info-row{if $block} block{/if}" {if $id}id="{$id}"{/if}>
    {if $title}<th class="info-head">{$title}</th>{/if}
    <td class="info-cell">{$cell1}</td>
    {if $cell2}
      <td class="info-cell">{$cell2}</td>
    {/if}
  </tr>
{/template}


/**
 * Prints a list of type expressions in a table row.
 */
{template .printTypeList private="true"}
  {@param types: list<dossier.expression.NamedType>}
  {@param title: string}

  {if length($types)}
    {call .infoRow}
      {param title kind="html"}{$title}{/param}
      {param block: true /}
      {param cell1 kind="html"}
        <ul class="type-list">
        {foreach $type in $types}
          <li>
            {call dossier.soy.type.typeReference}
              {param type: $type /}
              {param useQualifiedName: true /}
            {/call}
        {/foreach}
        </ul>
      {/param}
    {/call}
  {/if}
{/template}


/**
 * Prints a notification that a descriptor is deprecated.
 */
{template .deprecationNotice private="true"}
  {@param deprecation: dossier.Comment}

  {if $deprecation and length($deprecation.token)}
    <table class="info deprecation">
      {call .infoRow}
        {param title kind="html"}<i class="material-icons">warning</i> Deprecated{/param}
        {param cell1 kind="html"}
          {call .comment}
            {param comment: $deprecation /}
          {/call}
        {/param}
      {/call}
    </table>
  {/if}
{/template}


/**
 * Prints the values for the given enumeration.
 */
{template .enumValues private="true"}
  {@param enumeration: dossier.Enumeration}

  {if length($enumeration.value)}
    <section class="enum-values">
      <h2>Values</h2>
      <section class="property">
        <table class="info">
          {foreach $value in $enumeration.value}
            {call .infoRow}
              {param id: $value.name /}
              {param block: true /}
              {param title kind="html"}{$value.name}{/param}  // TODO: deprecation tags
              {param cell1 kind="html"}
                {if ($value.description and length($value.description.token)) or
                    ($value.deprecation and length($value.deprecation.token))}
                  {call .comment}
                    {param comment: $value.description /}
                  {/call}
                  {call .deprecationNotice}
                    {param deprecation: $value.deprecation /}
                  {/call}
                {/if}
              {/param}
            {/call}
          {/foreach}
        </table>
      </section>
    </section>
  {/if}
{/template}


/**
 * Prints the summaries for the types nested within this type (e.g. classes,
 * enums, and interfaces).
 *
 * @param title The section title.
 * @param types A list of Dossier.JsType.NestedTypes.TypeSummary objects.
 */
{template .nestedTypeSummaries}
  {if length($types) > 0}
    <section>
      <h2>{$title}</h2>
      <div class="type-summary">
        <dl>
          {foreach $type in $types}
            <dt><a href="{$type.href}">{$type.name}</a>
            <dd>
              {if $type.summary and length($type.summary.token)}
                {call .comment}
                  {param comment: $type.summary /}
                {/call}
              {else}
                No description.
              {/if}
          {/foreach}
        </dl>
      </div>
    </section>
  {/if}
{/template}


/**
 * Generates the table rows that describe some typed details about a function,
 * such as the named parameters or the conditions under which the function will
 * throw.
 */
{template .typeDetails}
  {@param header: string}
  {@param details: list<dossier.Function.Detail>}
  {@param? fillEmpty: bool}

  {if $fillEmpty or ($details and length($details) > 0)}
    {call .infoRow}
      {param block: true /}
      {param title kind="html"}{$header}{/param}
      {param cell1 kind="html"}
        {if $details and length($details) > 0}
          <table class="info detail">
            {foreach $detail in $details}
              {let $type kind="html"}
                {if $detail.type}
                  {call dossier.soy.type.expression}
                    {param expression: $detail.type /}
                    {param strict: true /}
                  {/call}
                {/if}
              {/let}
              {let $content kind="html"}
                {if $detail.description}
                  {call .comment}
                    {param comment: $detail.description /}
                  {/call}
                {/if}
              {/let}

              {if $detail.name}
                {call .infoRow}
                  {param cell1 kind="html"}<var>{$detail.name}</var>{/param}
                  {param cell2 kind="html"}{$type}{/param}
                {/call}
                {call .infoRow}
                  {param cell1 kind="html"}{/param}
                  {param cell2 kind="html"}{$content}{/param}
                {/call}
              {else}
                {call .infoRow}
                  {param cell1 kind="html"}{$type}{/param}
                {/call}
                {call .infoRow}
                  {param cell1 kind="html"}{$content}{/param}
                {/call}
              {/if}
            {/foreach}
          </table>
        {else}
          <p>None.</p>
        {/if}
      {/param}
    {/call}
  {/if}
{/template}


/**
 * Generates a table with details about a single function, such as its
 * arguments, thrown types, deprecation notice, and return type.
 */
{template .fnDetails}
  {@param fn: dossier.Function}
  {@param? verbose: bool}  // Whether to print the overrides and deprecation notice.

  <table class="info">
    {if $verbose}
      {call .overrides}
        {param base: $fn.base /}
      {/call}
    {/if}
    {call .typeDetails}
      {param header: 'Parameters' /}
      {param details: $fn.parameter /}
      {param fillEmpty: true /}
    {/call}
    {if not $fn.isConstructor
        and $fn.return
        and (($fn.return.description and length($fn.return.description.token))
             or $fn.return.type)}
      {call .typeDetails}
        {param header: 'Returns' /}
        {param details: [$fn.return] /}
      {/call}
    {/if}
    {call .typeDetails}
      {param header: 'Throws' /}
      {param details: $fn.thrown /}
    {/call}
    {call .seeAlso}
      {param base: $fn.base /}
    {/call}
  </table>
{/template}


/**
 * Prints a list of template type names: {@literal <A, B, C>}.
 *
 * @param names The list of template type names.
 */
{template .printTemplateNames}
  <var class="template">&lt;
  {foreach $name in $names}
    {$name}
    {if not isLast($name)},{sp}{/if}
  {/foreach}
  &gt;</var>
{/template}


/** Renders a function signature. */
{template .functionSignature private="true"}
  {@param fn: dossier.Function}

  {if $fn.isConstructor}
    new{sp}
  {/if}
  {$fn.base.name}
  {if $fn.templateName and length($fn.templateName)}
    {call .printTemplateNames}
      {param names: $fn.templateName /}
    {/call}
  {/if}
  (
  {if length($fn.parameter)}
    {sp}
    {foreach $parameter in $fn.parameter}
      <var>
        {if $parameter.type.isVarargs}...{/if}
        {$parameter.name}
      </var>
      {if not isLast($parameter)},{sp}{/if}
    {/foreach}
    {sp}
  {/if}
  )
  {if not $fn.isConstructor}
    {if $fn.return and $fn.return.type}
      {call dossier.soy.type.yields}
        {param expression: $fn.return.type /}
      {/call}
    {elseif $fn.return}  // Return statement with no type.
      {call dossier.soy.type.yieldsUnknown /}
    {else}
      {call dossier.soy.type.yieldsVoid /}
    {/if}
  {/if}
{/template}


/**
 * Generates the HTML for a type descriptor's main function (which is either
 * a constructor or the primary function in a namespace/module which all other
 * properties are hung off of).
 */
{template .mainFunction}
  {@param type: dossier.JsType}

  {let $fn: $type.mainFunction /}
  {let $isNonTrivial: length($fn.parameter)
                      or length($fn.thrown)
                      or ($fn.return
                          and $fn.return.description
                          and length($fn.return.description.token)) /}
  {if $fn.isConstructor}
    <h3 class="name">
      {call .tags}
        {param visibility: $fn.base.visibility /}
      {/call}
      <div>
        {call .functionSignature}
          {param fn: $fn /}
        {/call}
      </div>
    </h3>
    {call .fnDetails}
      {param fn: $fn /}
    {/call}
  {elseif $isNonTrivial}
    <h3 class="name">
      <div>
        {call .functionSignature}
          {param fn: $fn /}
        {/call}
      </div>
    </h3>
    {call .fnDetails}
      {param fn: $fn /}
    {/call}
  {/if}
{/template}


/**
 * Template for rendering type information about what a function overrides
 * or any interfaces it is specified by.
 */
{template .overrides}
  {@param base: dossier.BaseProperty}

  {if $base.definedBy}
    {call .printTypeList}
      {param types: [$base.definedBy] /}
      {param title: 'Defined by' /}
    {/call}
  {/if}
  {if $base.overrides}
    {call .printTypeList}
      {param types: [$base.overrides] /}
      {param title: 'Overrides' /}
    {/call}
  {/if}
  {call .printTypeList}
    {param types: $base.specifiedBy /}
    {param title: 'Specified by' /}
  {/call}
{/template}


/**
 * Renders a collection of properties.
 */
{template .renderProperties}
  {@param title: string}
  {@param? functions: list<dossier.Function>}
  {@param? properties: list<dossier.Property>}

  {if ($functions and length($functions)) or ($properties and length($properties))}
    <section class="instance-methods">  // TODO: rename.
      <h2>{$title}</h2>
      {if $functions and length($functions)}
        {foreach $function in $functions}
          {call .renderProperty}
            {param function: $function /}
          {/call}
        {/foreach}
      {elseif $properties and length($properties)}
        {foreach $property in $properties}
          {call .renderProperty}
            {param property: $property /}
          {/call}
        {/foreach}
      {/if}
    </section>
  {/if}
{/template}


/**
 * Renders the header for an expandable property section.
 */
{template .renderProperty}
  {@param? function: dossier.Function}
  {@param? property: dossier.Property}

  {let $base: $function ? $function.base : $property.base /}
  {call .renderCard}
    {param className: 'property expandable' /}
    {param id: $base.name /}
    {param source: $base.source /}
    {param header kind="html"}
      <div class="more">
        <i class="material-icons">expand_more</i>
      </div>

      <h3 class="name">
        {call .tags}
          {param tags: $base.tags /}
          {param visibility: $base.visibility /}
        {/call}
        <div>
          {if $function}
            {call .functionSignature}
              {param fn: $function /}
            {/call}
          {elseif $property}
            {$base.name}
            {if $property.type}
              {call dossier.soy.type.yields}
                {param expression: $property.type /}
                {param strict: true /}
              {/call}
            {/if}
          {/if}
        </div>
      </h3>
    {/param}
    {param body kind="html"}
      {call .comment}
        {param comment: $base.description /}
      {/call}
      {call .deprecationNotice}
        {param deprecation: $base.deprecation /}
      {/call}
      {let $fn: $function /}
      {if $fn
          and (($fn.base.deprecation and length($fn.base.deprecation.token))
               or $fn.base.overrides
               or length($fn.base.specifiedBy)
               or length($fn.parameter)
               or length($fn.thrown)
               or ($fn.return
                   and (($fn.return.description and length($fn.return.description.token))
                        or $fn.return.type)))}
        {if $function}  // Extra if required for soy type checking.
          {call .fnDetails}
            {param fn: $function /}
            {param verbose: true /}
          {/call}
        {/if}
      {elseif $property
          and ($property.base.overrides
               or length($property.base.specifiedBy)
               or ($property.base.deprecation and length($property.base.deprecation.token))
               or length($property.base.seeAlso))}
        <table class="info">
          {call .overrides}
            {param base: $property.base /}
          {/call}
          {call .seeAlso}
            {param base: $property.base /}
          {/call}
        </table>
      {elseif not $base.description
              or not length($base.description.token)}
        <p>No information.</p>
      {/if}
    {/param}
  {/call}
{/template}


/**
 * Print a list of functions.
 */
{template .printFunctions}
  {@param functions: list<dossier.Function>}

  {foreach $fn in $functions}
    {call .renderProperty}
      {param function: $fn /}
    {/call}
  {/foreach}
{/template}

/**
 * Prints the list of properties that re-export another module.
 */
{template .printReexportedModules}
  {@param properties: list<dossier.Property>}
  <ul>
    {foreach $property in $properties}
      <li id="{$property.base.name}">
        {let $link: $property.base.source
                    and ($property.base.source.path or $property.base.source.uri) /}
        {if $link}
          {if $property.base.source.uri}
            <a href="{$property.base.source.uri}" target="_blank" title="View source">
          {else}
            {let $hasLine: $property.base.source.line and $property.base.source.line > 0 /}
            <a href="{$property.base.source.path}{if $hasLine}#l{$property.base.source.line}{/if}"
                title="View source">
          {/if}
        {/if}
        {$property.base.name}
        {if $link}</a>{/if}

        {if $property.type}
          {call dossier.soy.type.yields}
            {param expression: $property.type /}
            {param strict: true /}
          {/call}
        {/if}
    {/foreach}
  </ul>
{/template}


/**
 * Renders references to other resources defined by @see annotations.
 * This template assumes it is called with a DL element.
 */
{template .seeAlso}
  {@param base: dossier.BaseProperty}
  {if length($base.seeAlso)}
    {call .infoRow}
      {param block: true /}
      {param title kind="html"}See Also{/param}
      {param cell1 kind="html"}
        {foreach $ref in $base.seeAlso}
          {call .comment}
            {param comment: $ref /}
            {param ensureParagraph: true /}
          {/call}
        {/foreach}
      {/param}
    {/call}
  {/if}
{/template}


/**
 * Generates the header for the main section of a type file.
 */
{template .typeHeader}
  {@param type: dossier.JsType}

  {if $type.parent}
    <table class="info">
      {call .printTypeList}
        {param types: [$type.parent.type] /}
        {param title: $type.parent.isModule ? 'Module' : 'Namespace' /}
      {/call}
    </table>
  {/if}
  <h1 class="title{if $type.deprecation}{sp}deprecated{/if}">
    {call .tags}
      {param tags: $type.tags /}
      {param visibility: $type.enumeration ? $type.enumeration.visibility : null /}
    {/call}
    <div>
      {if $type.tags.isModule}
        module {$type.name}
      {elseif $type.tags.isRecord}
        record {$type.name}
      {elseif $type.tags.isInterface}
        interface {$type.name}
      {elseif $type.mainFunction and $type.mainFunction.isConstructor}
        class {$type.name}
      {elseif $type.enumeration}
        enum {$type.name}
      {else}
        namespace {$type.name}
      {/if}
      {if $type.mainFunction and length($type.mainFunction.templateName)}
        {call .printTemplateNames}
          {param names: $type.mainFunction.templateName /}
        {/call}
      {/if}
    </div>
  </h1>
{/template}


/**
 * Renders a list of tags.
 */
{template .tags private="true"}
  {@param? tags: dossier.Tags}
  {@param? visibility: dossier.Visibility}
  {@param? span: bool}

  {let $hasTags: $tags and ($tags.isDeprecated
                            or $tags.isConst
                            or $tags.isFinal
                            or $tags.isDict
                            or $tags.isStruct) /}

  {if $hasTags or ($visibility and $visibility != dossier.Visibility.PUBLIC)}
    <{if $span}span{else}div{/if} class="tags">
      {if $tags and $tags.isDeprecated}<span class="deprecated"></span>{/if}

      {if $visibility == dossier.Visibility.PACKAGE}
        <span class="package"></span>
      {elseif $visibility == dossier.Visibility.PRIVATE}
        <span class="private"></span>
      {elseif $visibility == dossier.Visibility.PROTECTED}
        <span class="protected"></span>
      {/if}

      {if $tags}
        {if $tags.isConst}<span class="const"></span>{/if}
        {if $tags.isFinal}<span class="final"></span>{/if}
        {if $tags.isDict}<span class="dict"></span>{/if}
        {if $tags.isStruct}<span class="struct"></span>{/if}
      {/if}
    </{if $span}span{else}div{/if}>
  {/if}
{/template}

/**
 * Renders a section for a list of types defined as a property of another type.
 */
{template .nestedTypeSection private="true"}
  {@param title: string}                            // The section title.
  {@param isModule: bool}                           // Whether the types are exported by a module.
  {@param types: list<dossier.JsType.TypeSummary>}  // The nested types.
  {if $types and length($types) > 0}
    <section class="types">
      <h2>{if $isModule}Exported{sp}{/if}{$title}</h2>
      <ul>
        {foreach $type in $types}
          <li class="summary">
            {call .tags}
              {param tags: $type.tags /}
            {/call}
            <div><a href="{$type.href}">{$type.name}</a></div>
        {/foreach}
      </ul>
    </section>
  {/if}
{/template}


/**
 * Generates an HTML page for displaying the documentation about a single
 * JavaScript type or namespace.
 */
{template .typeFile private="true"}
  {@param types: list<dossier.JsType>}
  {if length($types) > 1}
    <article>
      <h2>Did you mean?</h2>
      <ul>
        {foreach $type in $types}
          <li><a href="{$type.filename}">{$type.qualifiedName}</a>
        {/foreach}
      </ul>
    </article>
  {/if}
  {foreach $type in $types}
    {if length($types) > 1}
      <article
          style="display:none"
          data-name="{$type.name}" data-filename="{$type.filename}">
    {else}
      <article>
    {/if}
      {call .renderCard}
        {param className: 'intro' /}
        {param source: $type.source /}
        {param header kind="html"}
          {call .typeHeader}
            {param type: $type /}
          {/call}
        {/param}
        {param body kind="html"}
          {if length($type.extendedType)
              or length($type.implementedType)
              or length($type.subtype)
              or ($type.tags.isInterface and length($type.implementation))
              or $type.aliasedType
              or length($type.knownAlias)
              or ($type.enumeration and $type.enumeration.type)}
            <table class="info">
              {call .printTypeList}
                {param types: $type.extendedType /}
                {param title: 'Extends' /}
              {/call}
              {call .printTypeList}
                {param types: $type.implementedType /}
                {param title: 'All ' + ($type.tags.isInterface ? 'Extended' : 'Implemented')
                                  + ' Interfaces' /}
              {/call}
              {call .printTypeList}
                {param types: $type.subtype /}
                {param title: 'All Known '
                    + ($type.tags.isInterface ? 'Subinterfaces' : 'Direct Subclasses') /}
              {/call}
              {call .printTypeList}
                {param types: $type.implementation /}
                {param title: 'All Known Implementations' /}
              {/call}
              {if $type.aliasedType}
                {call .printTypeList}
                  {param types: [$type.aliasedType] /}
                  {param title: 'Alias for' /}
                {/call}
              {/if}
              {call .printTypeList}
                {param types: $type.knownAlias /}
                {param title: 'All Known Aliases' /}
              {/call}
              {if ($type.enumeration and $type.enumeration.type)}
                {call .infoRow}
                  {param title kind="html"}Type{/param}
                  {param cell1 kind="html"}
                    {call dossier.soy.type.expression}
                      {param expression: $type.enumeration.type /}
                      {param strict: true /}
                    {/call}
                  {/param}
                {/call}
              {/if}
            </table>
          {/if}
          {call .deprecationNotice}
            {param deprecation: $type.deprecation /}
          {/call}
          {if $type.description
              and length($type.description.token)}
            {call .comment}
              {param comment: $type.description /}
            {/call}
          {else}
            <p>No description available.</p>
          {/if}

          {if not $type.tags.isInterface and $type.mainFunction}
            {call .mainFunction}
              {param type: $type /}
            {/call}
          {/if}
        {/param}
      {/call}

      {if $type.enumeration}
        {call .enumValues}
          {param enumeration: $type.enumeration /}
        {/call}
      {/if}

      {call .renderProperties}
        {param title: 'Instance Methods' /}
        {param functions: $type.method /}
      {/call}

      {call .renderProperties}
        {param title: 'Instance Properties' /}
        {param properties: $type.field /}
      {/call}

      {let $staticPrefix kind="text"}
        {if $type.tags.isModule}
          Exported{sp}
        {elseif $type.mainFunction and $type.mainFunction.isConstructor}
          Static{sp}
        {/if}
      {/let}

      {if length($type.staticFunction)}
        {call .renderProperties}
          {param title: $staticPrefix + 'Functions' /}
          {param functions: $type.staticFunction /}
        {/call}
      {/if}

      {if $type.tags.isModule and length($type.reexportedModule)}
        <section class="exported-modules">
          <h2>Exported Modules</h2>
          {call .printReexportedModules}
            {param properties: $type.reexportedModule /}
          {/call}
        </section>
      {/if}

      {if length($type.staticProperty)}
        {call .renderProperties}
          {param title: $staticPrefix + 'Properties' /}
          {param properties: $type.staticProperty /}
        {/call}
      {/if}

      {if length($type.compilerConstant)}
        {call .renderProperties}
          {param title: 'Compiler Constants' /}
          {param properties: $type.compilerConstant /}
        {/call}
      {/if}

      {call .nestedTypeSection}
        {param isModule: $type.tags.isModule /}
        {param title: 'Interfaces' /}
        {param types: $type.nested.interface /}
      {/call}

      {call .nestedTypeSection}
        {param isModule: $type.tags.isModule /}
        {param title: 'Classes' /}
        {param types: $type.nested.class /}
      {/call}

      {call .nestedTypeSection}
        {param isModule: $type.tags.isModule /}
        {param title: 'Enumerations' /}
        {param types: $type.nested.enum /}
      {/call}

      {if length($type.typeDef)}
        {call .renderProperties}
          {param title: 'Type Definitions' /}
          {param properties: $type.typeDef /}
        {/call}
      {/if}

    </article>
  {/foreach}
{/template}


/**
 * Renders a markdown document article.
 */
{template .htmlFile private="true"}
  {@param comment: dossier.Comment}
  <article class="page">
    {if length($comment.token)}
      {call .comment data="all" /}
    {else}
      <strong>TODO</strong>
    {/if}
  </article>
{/template}


/**
 * Renders the content for a source file.
 */
{template .sourceFile private="true"}
  {@param file: dossier.SourceFile}
  <article class="srcfile">
    <h1 class="title">{$file.path}</h1>
    <div>
      <table>
        {foreach $line in $file.lines}
          <tr id="l{index($line) + 1}">
            <td><a href="#l{index($line) + 1}">{index($line) + 1}</a>
            <td>{$line}
        {/foreach}
      </table>
    </div>
  </article>
{/template}


/**
 * Renders a full page.
 */
{template .page}
  {@param data: dossier.PageData}

  <!DOCTYPE html>
  <meta charset="UTF-8">
  <meta name="viewport"
        content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no">
  <meta http-equiv="Content-Language" content="en">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <title>
    {if $data.types and length($data.types.type)}
      {$data.types.type[0].name}
    {elseif $data.markdown and $data.markdown.content}
      {$data.markdown.title}
    {elseif $data.file}
      {$data.file.baseName}
    {/if}
  </title>
  {foreach $script in $data.resources.headScript}
    <script src="{$script}"></script>
  {/foreach}
  {foreach $styleSheet in $data.resources.css}
    <link href="{$styleSheet}" rel="stylesheet" type="text/css">
  {/foreach}
  <header>
    <button class="dossier-menu">
      <i class="material-icons">menu</i>
    </button>
    <form>
      <input type="search" placeholder="Search" tabindex="1">
      <i class="material-icons">search</i>
    </form>
  </header>
  <nav class="dossier-nav"></nav>
  <div class="content">
    <main>
      {call .mainPageContent data="all" /}
    </main>
    <footer>
      <div>
        <a href="https://github.com/jleyba/js-dossier">Generated by dossier</a>
      </div>
    </footer>
  </div>
  {foreach $script in $data.resources.tailScript}
    <script src="{$script}"></script>
  {/foreach}
{/template}


/**
 * Renders the main content for a page.
 */
{template .mainPageContent}
  {@param data: dossier.PageData}
  {if $data.types and length($data.types.type)}
    {call .typeFile}
      {param types: $data.types.type /}
    {/call}
  {elseif $data.markdown and $data.markdown.content}
    {call .htmlFile}
      {param comment: $data.markdown.content /}
    {/call}
  {elseif $data.file}
    {call .sourceFile}
      {param file: $data.file /}
    {/call}
  {/if}
{/template}
