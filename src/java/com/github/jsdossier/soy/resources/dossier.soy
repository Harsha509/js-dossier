{namespace dossier.soy}

/**
 * Renders a block comment.
 */
{template .comment}
  {@param comment: dossier.Comment}
  {if $comment and length($comment.token)}
    {foreach $token in $comment.token}
      {if $token.href}<a href="{$token.href}">{/if}
      {if $token.text}{$token.text}{/if}
      {if $token.html}{$token.html}{/if}
      {if $token.href}</a>{/if}
    {/foreach}
  {/if}
{/template}


/**
 * Renders a source link.
 */
{template .sourceLink private="true"}
  {@param text: string}                // The link text.
  {@param source: dossier.SourceLink}  // The link.
  {if $source.uri}
    <a href="{$source.uri}" target="_blank">{$text}</a>
  {elseif $source.path}
    <a href="{$source.path}{if $source.line and $source.line > 0}#l{$source.line}{/if}">{$text}</a>
  {else}
    {$text}
  {/if}
{/template}

/**
 * Renders a link to where code is defined in the source.
 */
{template .codeLink private="true"}
  {@param source: dossier.SourceLink}  // The link.
  {@param? text: string}
  {@param? noDiv: bool}
  {if $source.path}
    {if not $noDiv}<div class="code-link">{/if}
      {if $source.uri}
        <a href="{$source.uri}" target="_blank" title="View source">
      {else}
        <a href="{$source.path}{if $source.line and $source.line > 0}#l{$source.line}{/if}"
            title="View source">
      {/if}
      {if $text}
        {$text}
      {else}
        <i class="material-icons">code</i>
      {/if}
      </a>
    {if not $noDiv}</div>{/if}
  {/if}
{/template}

/**
 * Prints a graphical representation of a class's type inheritance:
 * goog.Foo
 *   - goog.Bar
 *       - goog.Bim
 *           - goog.Baz
 *
 * This template is a no-op if given a non-class descriptor.
 */
{template .classInheritance}
  {@param types: list<dossier.Comment>}

  {if length($types) >= 2}
    <pre class="inheritance">
      {foreach $type in $types}
        {if not isFirst($type)}
          {\n}{print '  '}
          {if index($type) > 1}
            {for $i in range(index($type) - 1)}{print '    '}{/for}
          {/if}
          &#x2514;{sp}
        {/if}
        {call .comment}
          {param comment: $type /}
        {/call}
      {/foreach}
    </pre>
  {/if}
{/template}


/**
 * Prints information about the interfaces the given descriptor implements or
 * extends (if itself an interface).
 */
{template .printInterfaces private="true"}
  {@param type: dossier.JsType}

  // Note: if type is itself an interface, it will not be included in the
  // |implemented_type| list.
  {if length($type.implementedType)}
    <dt class="spec">
      All {if $type.tags.isInterface}extended{else}implemented{/if} interfaces
    {foreach $interface in $type.implementedType}
      <dd><code>
        {call .comment}
          {param comment: $interface /}
        {/call}
      </code>
    {/foreach}
  {/if}
{/template}


/**
 * Prints a link to another descriptor that the given type is an alias
 * for.
 */
{template .printAliasLink private="true"}
  {@param type: dossier.JsType}

  {if $type.aliasedType}
    <dt class="spec">Alias for{sp}
      <code>
        {if $type.aliasedType.href}
          <a href="{$type.aliasedType.href}">{$type.aliasedType.text}</a>
        {else}
          {$type.aliasedType.text}
        {/if}
      </code>
  {/if}
{/template}


/**
 * Prints a notification that a descriptor is deprecated.
 */
{template .deprecationNotice private="true"}
  {@param deprecation: dossier.Comment}
  {if $deprecation and length($deprecation.token)}
    <dt class="spec">Deprecated
    <dd>
    {call .comment}
      {param comment: $deprecation /}
    {/call}
  {/if}
{/template}


/**
 * Prints the values for the given enumeration.
 */
{template .enumValues private="true"}
  {@param enumeration: dossier.Enumeration}

  {if length($enumeration.value)}
    <section class="enum-values">
      <h2>Values</h2>
      <section class="property">
        {foreach $value in $enumeration.value}
          <div id="{$value.name}">
            <dl>
              <dt{if $value.deprecation and length($value.deprecation.token)} class="deprecated"{/if}>
                {$value.name}
              {if ($value.description and length($value.description.token)) or
                  ($value.deprecation and length($value.deprecation.token))}
                <dd>
                  {call .comment}
                    {param comment: $value.description /}
                  {/call}
                  <dl>
                    {call .deprecationNotice}
                      {param deprecation: $value.deprecation /}
                    {/call}
                  </dl>
              {/if}
            </dl>
          </div>
        {/foreach}
      </section>
    </section>
  {/if}
{/template}


/**
 * Prints the summaries for the types nested within this type (e.g. classes,
 * enums, and interfaces).
 *
 * @param title The section title.
 * @param types A list of Dossier.JsType.NestedTypes.TypeSummary objects.
 */
{template .nestedTypeSummaries}
  {if length($types) > 0}
    <section>
      <h2>{$title}</h2>
      <div class="type-summary">
        <dl>
          {foreach $type in $types}
            <dt><a href="{$type.href}">{$type.name}</a>
            <dd>
              {if $type.summary and length($type.summary.token)}
                {call .comment}
                  {param comment: $type.summary /}
                {/call}
              {else}
                No description.
              {/if}
          {/foreach}
        </dl>
      </div>
    </section>
  {/if}
{/template}


/**
 * Generates the table rows that describe some typed details about a function,
 * such as the named parameters or the conditions under which the function will
 * throw.
 */
{template .typeDetails}
  {@param header: string}
  {@param details: list<dossier.Function.Detail>}
  {@param? fillEmpty: bool}

  {if $fillEmpty or ($details and length($details) > 0)}
    <dt class="spec">{$header}</dt>
    <dd>
      <dl>
        {if $details and length($details) > 0}
          {foreach $detail in $details}
            <dt{if $detail.name} class="name"{/if}>
            {if $detail.name}<var>{$detail.name}</var>{/if}
            {if $detail.type and length($detail.type.token)}
              <code>
                {call .comment}
                  {param comment: $detail.type /}
                {/call}
              </code>
            {/if}
            {let $detailComment kind="html"}
              {if $detail.description}
                {call .comment}
                  {param comment: $detail.description /}
                {/call}
              {/if}
            {/let}
            {if $detailComment and $detailComment != '.'}
              <dd>{$detailComment}
            {/if}
          {/foreach}
        {else}
          <dd><p>None.</p>
        {/if}
      </dl>
    </dd>
  {/if}
{/template}


/**
 * Generates a table with details about a single function, such as its
 * arguments, thrown types, deprecation notice, and return type.
 */
{template .fnDetails}
  {@param fn: dossier.Function}
  {@param? forceParams: bool}

  // Only generate the table if there is data to actually display.
  {if $forceParams
      or length($fn.parameter)
      or length($fn.thrown)
      or length($fn.base.seeAlso)
      or ($fn.return and not $fn.isConstructor
          and (($fn.return.description and length($fn.return.description.token))
          or ($fn.return.type and length($fn.return.type.token))))}
    {call .typeDetails}
      {param header: 'Parameters' /}
      {param details: $fn.parameter /}
      {param fillEmpty: $forceParams /}
    {/call}
    {if not $fn.isConstructor
        and $fn.return
        and (($fn.return.description and length($fn.return.description.token)) or
             ($fn.return.type and length($fn.return.type.token)))}
      {call .typeDetails}
        {param header: 'Returns' /}
        {param details: [$fn.return] /}
      {/call}
    {/if}
    {call .typeDetails}
      {param header: 'Throws' /}
      {param details: $fn.thrown /}
    {/call}
    {call .seeAlso}
      {param base: $fn.base /}
    {/call}
  {/if}
{/template}


/**
 * Prints a list of template type names: {@literal <A, B, C>}.
 *
 * @param names The list of template type names.
 */
{template .printTemplateNames}
  <var class="template">&lt;
  {foreach $name in $names}
    {$name}
    {if not isLast($name)},{sp}{/if}
  {/foreach}
  &gt;</var>
{/template}


/** Renders a list of function arguments. */
{template .functionArgs}
  {@param fn: dossier.Function}
  (
  {foreach $parameter in $fn.parameter}
    <var>{$parameter.name}</var>
    {if not isLast($parameter)},{sp}{/if}
  {/foreach}
  )
{/template}


/**
 * Generates the HTML for a type descriptor's main function (which is either
 * a constructor or the primary function in a namespace/module which all other
 * properties are hung off of).
 */
{template .mainFunction}
  {@param type: dossier.JsType}

  {let $fn: $type.mainFunction /}
  {let $isNonTrivial: length($fn.parameter)
                      or length($fn.thrown)
                      or ($fn.return
                          and $fn.return.description
                          and length($fn.return.description.token)) /}
  {if $fn.isConstructor}
    <h3 class="name">
      {call .tags}
        {param tags: null /}
        {param visibility: $fn.base.visibility /}
      {/call}
      <div>
        new {$fn.base.name}
        {call .functionArgs}
          {param fn: $fn /}
        {/call}
      </div>
    </h3>
    {call .fnDetails}
      {param fn: $fn /}
      {param forceParams: true /}
    {/call}
  {elseif $isNonTrivial}
    <h3 class="name">
      <div>
        {$fn.base.name}
        {call .functionArgs}
          {param fn: $fn /}
        {/call}
      </div>
    </h3>
    <dl>
      {call .fnDetails}
        {param fn: $fn /}
      {/call}
    </dl>
  {/if}
{/template}


/**
 * Template for rendering type information about what a function overrides
 * or any interfaces it is specified by.
 */
{template .overrides}
  {@param base: dossier.BaseProperty}

  {if $base.definedBy}
    <dt class="spec">Defined by</dt>
    <dd>
      {call .comment}
        {param comment: $base.definedBy /}
      {/call}
    </dd>
  {/if}
  {if $base.overrides}
    <dt class="spec">Overrides</dt>
    <dd>
      {call .comment}
        {param comment: $base.overrides /}
      {/call}
    </dd>
  {/if}
  {if length($base.specifiedBy)}
    <dt class="spec">Specified by</dt>
    {foreach $spec in $base.specifiedBy}
      <dd>
        {call .comment}
          {param comment: $spec /}
        {/call}
      </dd>
    {/foreach}
  {/if}

{/template}


/**
 * Print a list of functions.
 */
{template .printFunctions}
  {@param functions: list<dossier.Function>}

  {foreach $fn in $functions}
    <section class="property expandable" id="{$fn.base.name}">
      <div class="header">
        {call .codeLink}
          {param source: $fn.base.source /}
        {/call}

        <h3 class="name">
          {call .tags}
            {param tags: $fn.base.tags /}
            {param visibility: $fn.base.visibility /}
          {/call}
          <div>
            {if $fn.templateName and length($fn.templateName)}
              {call .printTemplateNames}
                {param names: $fn.templateName /}
              {/call}
              {sp}
            {/if}
            {$fn.base.name}
            {call .functionArgs}
              {param fn: $fn /}
            {/call}
          </div>
        </h3>
      </div>

      <div class="body">
        {call .comment}
          {param comment: $fn.base.description /}
        {/call}

        {if ($fn.base.deprecation and length($fn.base.deprecation.token))
            or $fn.base.overrides
            or length($fn.base.specifiedBy)
            or length($fn.parameter)
            or length($fn.thrown)
            or ($fn.return and
                (($fn.return.description and length($fn.return.description.token)) or
                 ($fn.return.type and length($fn.return.type.token))))}
          <dl>
            {call .deprecationNotice}
              {param deprecation: $fn.base.deprecation /}
            {/call}
            {call .overrides}
              {param base: $fn.base /}
            {/call}
            {call .fnDetails}
              {param fn: $fn /}
            {/call}
          </dl>
        {elseif not $fn.base.description or not length($fn.base.description.token)}
          <p>No information.</p>
        {/if}
      </div>
    </section>
  {/foreach}
{/template}

/**
 * Prints the list of properties that re-export another module.
 */
{template .printReexportedModules}
  {@param properties: list<dossier.Property>}
  <ul>
    {foreach $property in $properties}
      <li id="{$property.base.name}">
        {if $property.base.source}
          {call .codeLink}
            {param source: $property.base.source /}
            {param text: $property.base.name /}
            {param noDiv: true /}
          {/call}
        {else}
          {$property.base.name}
        {/if}
        {if $property.type}
          <i>(
            {call .comment}
              {param comment: $property.type /}
            {/call}
          )</i>
        {/if}
    {/foreach}
  </ul>
{/template}

/**
 * Print a list of properties.
 */
{template .printProperties}
  {@param properties: list<dossier.Property>}

  {foreach $property in $properties}
    <section class="property expandable" id="{$property.base.name}">
      <div class="header">
        {call .codeLink}
          {param source: $property.base.source /}
        {/call}

        <h3 class="name">
          {call .tags}
            {param tags: $property.base.tags /}
            {param visibility: $property.base.visibility /}
          {/call}
          <div>{$property.base.name}</div>
        </h3>
      </div>

      <div class="body">
        {call .comment}
          {param comment: $property.base.description /}
        {/call}

        {if $property.base.overrides
            or length($property.base.specifiedBy)
            or $property.type
            or ($property.base.deprecation and length($property.base.deprecation.token))
            or length($property.base.seeAlso)}
          <dl>
            {call .deprecationNotice}
              {param deprecation: $property.base.deprecation /}
            {/call}
            {if $property.type}
              <dt class="spec">Type
              <dd>
                {call .comment}
                  {param comment: $property.type /}
                {/call}
              </dd>
            {/if}
            {call .overrides}
              {param base: $property.base /}
            {/call}
            {call .seeAlso}
              {param base: $property.base /}
            {/call}
          </dl>
        {elseif not $property.base.description
            or not length($property.base.description.token)}
          <p>No information.</p>
        {/if}
      </div>
    </section>
  {/foreach}
{/template}


/**
 * Renders references to other resources defined by @see annotations.
 * This template assumes it is called with a DL element.
 */
{template .seeAlso}
  {@param base: dossier.BaseProperty}
  {if length($base.seeAlso)}
    <dt class="spec">See Also</dt>
    {foreach $ref in $base.seeAlso}
      <dd>
        {call .comment}
          {param comment: $ref /}
        {/call}
      </dd>
    {/foreach}
  {/if}
{/template}


/**
 * Renders documentation for properties defined on the given type's
 * prototype chain.
 */
{template .prototype}
  {@param type: dossier.JsType}

  {if length($type.method)}
    <section class="instance-methods">
      <h2>Instance Methods</h2>
      {call .printFunctions}
        {param functions: $type.method /}
      {/call}
    </section>
  {/if}

  {if length($type.field)}
    <section class="instance-properties">
      <h2>Instance Properties</h2>
      {call .printProperties}
        {param properties: $type.field /}
      {/call}
    </section>
  {/if}
{/template}


/**
 * Prints the static property information for the given descriptor.
 */
{template .static}
  {@param type: dossier.JsType}

  {if length($type.staticFunction)}
    <section class="static-functions">
      <h2>
        {if $type.tags.isModule}
          Exported Functions
        {elseif $type.mainFunction and $type.mainFunction.isConstructor}
          Static Functions
        {else}
          Functions
        {/if}
      </h2>
      {call .printFunctions}
        {param functions: $type.staticFunction /}
      {/call}
    </section>
  {/if}

  {if $type.tags.isModule and length($type.reexportedModule)}
    <section class="exported-modules">
      <h2>Exported Modules</h2>
      {call .printReexportedModules}
        {param properties: $type.reexportedModule /}
      {/call}
    </section>
  {/if}

  {if length($type.staticProperty)}
    <section class="static-properties">
      <h2>
        {if $type.tags.isModule}
          Exported Properties
        {elseif $type.mainFunction and $type.mainFunction.isConstructor}
          Static Properties
        {else}
          Properties
        {/if}
      </h2>
      {call .printProperties}
        {param properties: $type.staticProperty /}
      {/call}
    </section>
  {/if}

  {if length($type.compilerConstant)}
    <section class="constants">
      <h2>Compiler Constants</h2>
      {call .printProperties}
        {param properties: $type.compilerConstant /}
      {/call}
    </section>
  {/if}
{/template}


/**
 * Generates the header for the main section of a type file.
 */
{template .typeHeader}
  {@param type: dossier.JsType}

  {if $type.parent}
    <div class="parentlink">
      <b>{if $type.parent.isModule}Module{else}Namespace{/if}:</b>{sp}
      {if $type.parent.link.href}
        <a href="{$type.parent.link.href}">{$type.parent.link.text}</a>
      {else}
        {$type.parent.link.text}
      {/if}
    </div>
  {/if}
  {if $type.source}
    <div class="codelink">
      {call .sourceLink}
        {param text: 'View Source' /}
        {param source: $type.source /}
      {/call}
    </div>
  {/if}
  <h1 class="title{if $type.deprecation}{sp}deprecated{/if}">
    {call .tags}
      {param tags: $type.tags /}
      {param visibility: $type.enumeration ? $type.enumeration.visibility : null /}
    {/call}
    <div>
      {if $type.tags.isModule}
        module {$type.name}
      {elseif $type.tags.isRecord}
        record {$type.name}
      {elseif $type.tags.isInterface}
        interface {$type.name}
      {elseif $type.mainFunction and $type.mainFunction.isConstructor}
        class {$type.name}
      {elseif $type.enumeration}
        enum {$type.name}
      {else}
        namespace {$type.name}
      {/if}
      {if $type.mainFunction and length($type.mainFunction.templateName)}
        {call .printTemplateNames}
          {param names: $type.mainFunction.templateName /}
        {/call}
      {/if}
    </div>
  </h1>
{/template}


/**
 * Renders a list of tags.
 */
{template .tags private="true"}
  {@param tags: dossier.Tags}
  {@param? visibility: dossier.Visibility}
  {@param? span: bool}
  {if $tags.isDeprecated
      or $tags.isConst
      or $tags.isFinal
      or $tags.isDict
      or $tags.isStruct
      or ($visibility and $visibility != dossier.Visibility.PUBLIC)}
    <{if $span}span{else}div{/if} class="tags">
      {if $tags.isDeprecated}<span class="deprecated"></span>{/if}

      {if $visibility == dossier.Visibility.PACKAGE}
        <span class="package"></span>
      {elseif $visibility == dossier.Visibility.PRIVATE}
        <span class="private"></span>
      {elseif $visibility == dossier.Visibility.PROTECTED}
        <span class="protected"></span>
      {/if}

      {if $tags.isConst}<span class="const"></span>{/if}
      {if $tags.isFinal}<span class="final"></span>{/if}
      {if $tags.isDict}<span class="dict"></span>{/if}
      {if $tags.isStruct}<span class="struct"></span>{/if}
    </{if $span}span{else}div{/if}>
  {/if}
{/template}

/**
 * Renders a section for a list of types defined as a property of another type.
 */
{template .nestedTypeSection private="true"}
  {@param title: string}                            // The section title.
  {@param isModule: bool}                           // Whether the types are exported by a module.
  {@param types: list<dossier.JsType.TypeSummary>}  // The nested types.
  {if $types and length($types) > 0}
    <section class="types">
      <h2>{if $isModule}Exported{sp}{/if}{$title}</h2>
      <ul>
        {foreach $type in $types}
          <li class="summary">
            {call .tags}
              {param tags: $type.tags /}
            {/call}
            <div><a href="{$type.href}">{$type.name}</a></div>
        {/foreach}
      </ul>
    </section>
  {/if}
{/template}


/**
 * Generates an HTML page for displaying the documentation about a single
 * JavaScript type or namespace.
 */
{template .typefile}
  {@param spec: dossier.JsTypeRenderSpec}

  {call dossier.soy.common.pageHeader}
    {param title: $spec.type[0].name /}
    {param resources: $spec.resources /}
  {/call}

  <div class="content">
    <main>
      {if length($spec.type) > 1}
        <article>
          <h2>Did you mean?</h2>
          <ul>
            {foreach $type in $spec.type}
              <li><a href="{$type.filename}">{$type.qualifiedName}</a>
            {/foreach}
          </ul>
        </article>
      {/if}
      {foreach $type in $spec.type}
        {if length($spec.type) > 1}
          <article
              style="display:none"
              data-name="{$type.name}" data-filename="{$type.filename}">
        {else}
          <article>
        {/if}
          <section class="intro">
            <div class="header">
              {call .typeHeader}
                {param type: $type /}
              {/call}
            </div>
            <div class="body">
              {call .classInheritance}
                {param types: $type.extendedType /}
              {/call}
              {if $type.aliasedType
                  or length($type.implementedType)
                  or ($type.enumeration and length($type.enumeration.type.token))
                  or ($type.deprecation and length($type.deprecation.token))}
                <dl>
                  {if $type.enumeration and length($type.enumeration.type.token)}
                    <dt class="spec">Type
                    <dd>
                      <code>
                        {call .comment}
                          {param comment: $type.enumeration.type /}
                        {/call}
                      </code>
                  {/if}
                  {call .printAliasLink}
                    {param type: $type /}
                  {/call}
                  {call .printInterfaces}
                    {param type: $type /}
                  {/call}
                  {call .deprecationNotice}
                    {param deprecation: $type.deprecation /}
                  {/call}
                </dl>
              {/if}
              {if $type.description
                  and length($type.description.token)}
                {call .comment}
                  {param comment: $type.description /}
                {/call}
              {else}
                <p>No description available.</p>
              {/if}

              {if not $type.tags.isInterface and $type.mainFunction}
                {call .mainFunction}
                  {param type: $type /}
                {/call}
              {/if}
            </div>
          </section>

          {if $type.enumeration}
            {call .enumValues}
              {param enumeration: $type.enumeration /}
            {/call}
          {/if}

          {call .prototype}
            {param type: $type /}
          {/call}

          {call .static}
            {param type: $type /}
          {/call}

          {call .nestedTypeSection}
            {param isModule: $type.tags.isModule /}
            {param title: 'Interfaces' /}
            {param types: $type.nested.interface /}
          {/call}
          {call .nestedTypeSection}
            {param isModule: $type.tags.isModule /}
            {param title: 'Classes' /}
            {param types: $type.nested.class /}
          {/call}
          {call .nestedTypeSection}
            {param isModule: $type.tags.isModule /}
            {param title: 'Enumerations' /}
            {param types: $type.nested.enum /}
          {/call}

          {if length($type.typeDef) > 0}
            <section class="type-defs">
              <h2>Type Definitions</h2>
              {foreach $typedef in $type.typeDef}
                <section id="{$typedef.name}" class="property expandable">
                  <div class="header">
                    {call .codeLink}
                      {param source: $typedef.source /}
                    {/call}
                    <h3 class="name">
                      {call .tags}
                        {param tags: $typedef.tags /}
                        {param visibility: $typedef.visibility /}
                      {/call}
                      <div>{$typedef.name}</div>
                    </h3>
                  </div>
                  <div class="body">
                    <dl>
                      <dt class="spec">Type
                      <dd>
                        <code>
                          {call .comment}
                            {param comment: $typedef.type /}
                          {/call}
                        </code>
                      {call .deprecationNotice}
                        {param deprecation: $typedef.deprecation /}
                      {/call}
                    </dl>
                    {if $typedef.description and length($typedef.description.token)}
                      {call .comment}
                        {param comment: $typedef.description /}
                      {/call}
                    {else}
                      <p>No description.</p>
                    {/if}
                  </div>
                </section>
              {/foreach}
            </section>
          {/if}

        </article>
      {/foreach}
    </main>
    {call dossier.soy.common.footer /}
  </div>

  {call dossier.soy.common.pageFooter}
    {param index: $spec.index /}
    {param resources: $spec.resources /}
  {/call}
{/template}


/**
 * Renders a generic page.
 */
{template .htmlFile}
  {@param spec: dossier.HtmlRenderSpec}

  {call dossier.soy.common.pageHeader}
    {param title: $spec.title /}
    {param resources: $spec.resources /}
  {/call}

  <div class="content">
    <main>
      <article class="page">
        {if $spec.content and length($spec.content.token)}
          {call .comment}
            {param comment: $spec.content /}
          {/call}
         {else}
          <strong>TODO</strong>
         {/if}
      </article>
    </main>
    {call dossier.soy.common.footer /}
  </div>

  {call dossier.soy.common.pageFooter}
    {param index: $spec.index /}
    {param resources: $spec.resources /}
  {/call}
{/template}


/**
 * Generates an HTML page for displaying the contents of a JavaScript source
 * file.
 */
{template .srcfile}
  {@param spec: dossier.SourceFileRenderSpec}

  {call dossier.soy.common.pageHeader}
    {param title: $spec.file.baseName /}
    {param resources: $spec.resources /}
  {/call}

  <div class="content">
    <main>
      <article class="srcfile">
      <h1>{$spec.file.path}</h1>

      <div>
        <table>
          {foreach $line in $spec.file.lines}
            <tr>
              <td><a id="l{index($line) + 1}"></a><a href="#l{index($line) + 1}">{index($line) + 1}</a>
              <td>{$line}
          {/foreach}
        </table>
      </div>

      </article>
    </main>

    {call dossier.soy.common.footer /}
  </div>

  {call dossier.soy.common.pageFooter}
    {param index: $spec.index /}
    {param resources: $spec.resources /}
  {/call}
{/template}
