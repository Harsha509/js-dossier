{namespace dossier.soy.proto}

{template .render}
  {@param data: list<[enum: google.protobuf.EnumDescriptorProto,
                      message: google.protobuf.DescriptorProto,
                      name: string]>}

{literal}// GENERATED CODE - DO NOT EDIT
goog.provide('proto.dossier');
{/literal}
{foreach $record in $data}
goog.provide('{$record.name}');{\n}
{/foreach}
{literal}

goog.require('soydata.SanitizedHtml');
goog.require('soydata.SanitizedUri');
goog.require('soydata.VERY_UNSAFE');

goog.scope(function() {

const pd = proto.dossier;

const SanitizedHtml = soydata.SanitizedHtml;
const SanitizedUri = soydata.SanitizedUri;
const ordainSanitizedHtml = soydata.VERY_UNSAFE.ordainSanitizedHtml;
const ordainSanitizedUri = soydata.VERY_UNSAFE.ordainSanitizedUri;


/** @private */
pd.Message_ = class {
  constructor(/** Object= */opt_data) {
    /** @private @const {!Object} */
    this.data_ = opt_data || {};

    /** @private @const */
    this.converted_ = new Map;
  }

  /**
   * @param {!pd.Message_} msg
   * @return {!pd.Message_}
   */
  static clone(msg) {
    let data = Object.assign({}, msg.data_);
    return new msg.constructor(data);
  }
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {T} defaultValue
 * @return {T}
 * @template T
 * @private
 */
pd.getPrimitiveField_ = function(message, fieldNumber, defaultValue) {
  return message.data_[fieldNumber] || defaultValue;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @return {!Array<T>}
 * @template T
 * @private
 */
pd.getPrimitiveListField_ = function(message, fieldNumber) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let data = message.data_[fieldNumber] || [];
  message.converted_.set(fieldNumber, data);
  return data;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {(string|number|boolean)} value
 * @private
 */
pd.setPrimitiveField_ = function(message, fieldNumber, value) {
  message.data_[fieldNumber] = value;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {*} value
 * @private
 */
pd.setComplexField_ = function(message, fieldNumber, value) {
  message.converted_.set(fieldNumber, value);
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {(function(!Object): !T|function(string): !T)} deserializer
 * @return {!Array<!T>}
 * @template T
 * @private
 */
pd.getMessageListField_ = function(message, fieldNumber, deserializer) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let data = message.data_[fieldNumber];
  let value = data ? data.map(/** @type {(!Object|string)} */(deserializer)) : [];
  message.converted_.set(fieldNumber, value);
  return value;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {function(!Object): !T} deserializer
 * @return {T}
 * @template T
 * @private
 */
pd.getMessageField_ = function(message, fieldNumber, deserializer) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let data = message.data_[fieldNumber];
  let value = data ? deserializer(/** @type {!Object} */(data)) : null;
  message.converted_.set(fieldNumber, value);
  return value;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {function(*): !T} deserializer
 * @return {!T}
 * @template T
 * @private
 */
pd.getSanitizedField_ = function(message, fieldNumber, deserializer) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let data = message.data_[fieldNumber];
  let value = deserializer(data || '');
  message.converted_.set(fieldNumber, value);
  return value;
};

{/literal}

{foreach $record in $data}
  {if $record.enum}
    {call .renderEnum}
      {param descriptor: $record.enum /}
      {param name: $record.name /}
    {/call}
  {else}
    {call .renderMessage}
      {param descriptor: $record.message /}
      {param name: $record.name /}
    {/call}
  {/if}
{/foreach}

{literal}
});  // goog.scope
{/literal}
{/template}


{template .renderEnum}
  {@param descriptor: google.protobuf.EnumDescriptorProto}
  {@param name: string}

{literal}
/** @enum {number} */
{/literal}{$name}{literal} = {
{/literal}

{foreach $value in $descriptor.value}
  {sp}{sp}
  {$value.name}: {$value.number}
  {if not isLast($value)},{/if}
  {\n}
{/foreach}

{literal}};
{/literal}
{/template}


{template .renderMessage}
  {@param descriptor: google.protobuf.DescriptorProto}
  {@param name: string}

{\n}
{$name}{literal} = class extends pd.Message_ {
  constructor(/** Object= */opt_data) {
    super(opt_data);
  }
{/literal}

{foreach $field in $descriptor.field}
  {let $type kind="text"}
    {switch $field.type}
      // Not all number types can be converted to JS, but we include them for completeness.
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FLOAT}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_INT64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_UINT64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_INT32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT64}number

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL}boolean

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_BYTES}string

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_STRING}
        {if isSanitizedHtml($name, $field.name)}
          SanitizedHtml
        {elseif isSanitizedUri($name, $field.name)}
          SanitizedUri
        {else}
          string
        {/if}

      {default}{typeName($field.typeName)}
    {/switch}
  {/let}

  {let $isEnum: $field.type == google.protobuf.FieldDescriptorProto.Type.TYPE_ENUM /}
  {let $isRepeated: $field.label == google.protobuf.FieldDescriptorProto.Label.LABEL_REPEATED /}
  {let $initData kind="html"}data = this.data_['{$field.number}'];{/let}
  {let $returnType kind="html"}{if $isRepeated}{arrayType('!' + $type)}{else}{$type}{/if}{/let}
  {let $isSanitized: $type == 'SanitizedHtml' or $type == 'SanitizedUri' /}
  {let $isMessage: not $isSanitized and $type != 'boolean' and $type != 'string' and $type != 'number' and not $isEnum /}

{literal}
  /**
   * @return {{/literal}{$returnType}{literal}}
   */
  get {/literal}{toLowerCamelCase($field.name)}{literal}() {
    {/literal}
    {if $isSanitized}
      {let $deserializer: $type == 'SanitizedHtml' ? 'ordainSanitizedHtml' : 'ordainSanitizedUri' /}
      {if $isRepeated}
        return pd.getMessageListField_(this, {$field.number}, {$deserializer});
      {else}
        return pd.getSanitizedField_(this, {$field.number}, {$deserializer});
      {/if}
    {elseif $isMessage}
      {if $isRepeated}
        return pd.getMessageListField_(this, {$field.number}, data => new {$type}(data));
      {else}
        return pd.getMessageField_(this, {$field.number}, data => new {$type}(data));
      {/if}
    {elseif $isRepeated}
      return pd.getPrimitiveListField_(this, {$field.number});
    {else}
      return pd.getPrimitiveField_(this, {$field.number},{sp}
      {if $type == 'boolean'}false
      {elseif $type == 'string'}''
      {elseif $isEnum}{literal}/** @type {{/literal}{$type}{literal}} */{/literal}(0)
      {else}0
      {/if});
    {/if}
{literal}
  }

  /**
   * @param {{/literal}{$returnType}{literal}} value
   */
  set {/literal}{toLowerCamelCase($field.name)}{literal}(value) {
    {/literal}
    {if $isRepeated or $isMessage or $isSanitized}
      pd.setComplexField_(this, {$field.number}, value);
    {else}
      pd.setPrimitiveField_(this, {$field.number}, value);
    {/if}
    {literal}
  }
{/literal}
{/foreach}

{literal}};
{/literal}
{/template}
