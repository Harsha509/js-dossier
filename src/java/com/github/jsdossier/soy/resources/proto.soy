{namespace dossier.soy.proto}

{template .render kind="js"}
  {@param data: list<[enum: google.protobuf.EnumDescriptorProto,
                      message: google.protobuf.DescriptorProto,
                      name: string]>}

{literal}// GENERATED CODE - DO NOT EDIT
goog.provide('proto.dossier');
{/literal}
{foreach $record in $data}
goog.provide('proto.{$record.name}');{\n}
{/foreach}
{literal}

goog.require('soydata.SanitizedHtml');
goog.require('soydata.SanitizedUri');
goog.require('soydata.VERY_UNSAFE');

goog.scope(function() {

const pd = proto.dossier;

const SanitizedHtml = soydata.SanitizedHtml;
const SanitizedUri = soydata.SanitizedUri;
const ordainSanitizedHtml = soydata.VERY_UNSAFE.ordainSanitizedHtml;
const ordainSanitizedUri = soydata.VERY_UNSAFE.ordainSanitizedUri;


/** @private */
pd.Message_ = class {
  /** @param {Array=} opt_data */
  constructor(opt_data) {
    /** @private @const {!Array} */
    this.data_ = opt_data || [];

    /** @private @const {!Map<number, ?>} */
    this.converted_ = new Map;
  }

  /**
   * @param {!pd.Message_} msg
   * @return {!pd.Message_}
   */
  static clone(msg) {
    return new msg.constructor(msg.data_.concat());
  }

  /**
   * @param {!MESSAGE_TYPE} destination
   * @param {!MESSAGE_TYPE} source
   * @template MESSAGE_TYPE
   */
  static merge(destination, source) {
    destination.data_ = source.data_;
    destination.converted_ = source.converted_;
  }

  /** @return {!Array} */
  toArray() {
    function encode(value) {
      if (value instanceof pd.Message_) {
        return value.toArray();
      } else if (goog.isArray(value)) {
        return value.map(encode);
      }
      return value;
    };

    let ret = this.data_.map(encode);
    this.converted_.forEach((key, value) => ret[key] = encode(value));
    return ret;
  }

  /** @return {!Array} */
  toJSON() {
    return this.toArray();
  }
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {T} defaultValue
 * @return {T}
 * @template T
 * @private
 */
pd.getPrimitiveField_ = function(message, fieldNumber, defaultValue) {
  return message.data_[fieldNumber - 1] || defaultValue;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @return {!Array<T>}
 * @template T
 * @private
 */
pd.getPrimitiveListField_ = function(message, fieldNumber) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let /** Array */data = pd.getPrimitiveField_(message, fieldNumber, null);
  data = data || [];
  message.converted_.set(fieldNumber, data);
  return data;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {(string|number|boolean)} value
 * @private
 */
pd.setPrimitiveField_ = function(message, fieldNumber, value) {
  message.data_[fieldNumber - 1] = value;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {*} value
 * @private
 */
pd.setComplexField_ = function(message, fieldNumber, value) {
  message.converted_.set(fieldNumber, value);
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {function(new: T, (Array|undefined|null))} messageCtor
 * @return {!Array<!T>}
 * @template T
 * @private
 */
pd.getMessageListField_ = function(message, fieldNumber, messageCtor) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let /** Array<(Array|undefined|null)> */ data = pd.getPrimitiveField_(
      message, fieldNumber, null);
  let value = data ? data.map(d => new messageCtor(d)) : [];
  message.converted_.set(fieldNumber, value);
  return value;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {function(new: T, Array)} msgType
 * @return {T}
 * @template T
 * @private
 */
pd.getMessageField_ = function(message, fieldNumber, msgType) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let /** Array */ data = pd.getPrimitiveField_(message, fieldNumber, null);
  let value = data ? new msgType(data) : null;
  message.converted_.set(fieldNumber, value);
  return value;
};


/**
 * @param {!pd.Message_} message
 * @param {number} fieldNumber
 * @param {function(*): !T} deserializer
 * @return {!T}
 * @template T
 * @private
 */
pd.getSanitizedField_ = function(message, fieldNumber, deserializer) {
  if (message.converted_.has(fieldNumber)) {
    return message.converted_.get(fieldNumber);
  }
  let data = pd.getPrimitiveField_(message, fieldNumber, '');
  let value = deserializer(data);
  message.converted_.set(fieldNumber, value);
  return value;
};

{/literal}

{foreach $record in $data}
  {if $record.enum}
    {call .renderEnum}
      {param descriptor: $record.enum /}
      {param name: $record.name /}
    {/call}
  {else}
    {call .renderMessage}
      {param descriptor: $record.message /}
      {param name: $record.name /}
    {/call}
  {/if}
{/foreach}

{literal}
});  // goog.scope
{/literal}
{/template}


{template .renderEnum kind="js"}
  {@param descriptor: google.protobuf.EnumDescriptorProto}
  {@param name: string}

{literal}
/** @enum {number} */
{/literal}{typeName($name)}{literal} = {
{/literal}

{foreach $value in $descriptor.valueList}
  {sp}{sp}
  {$value.name}: {$value.number}
  {if not isLast($value)},{/if}
  {\n}
{/foreach}

{literal}};
{/literal}
{/template}


{template .renderMessage kind="js"}
  {@param descriptor: google.protobuf.DescriptorProto}
  {@param name: string}

{\n}
{typeName($name)}{literal} = class extends pd.Message_ {
  /** @param {Array=} opt_data */
  constructor(opt_data) {
    super(opt_data);
  }
{/literal}

{foreach $field in $descriptor.fieldList}
  {let $type kind="text"}
    {switch $field.type}
      // Not all number types can be converted to JS, but we include them for completeness.
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FLOAT}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_INT64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_UINT64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_INT32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT64}number

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL}boolean

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_BYTES}string

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_STRING}string
      {default}{typeName($field.typeName)}
    {/switch}
  {/let}

  {let $isEnum: $field.type == google.protobuf.FieldDescriptorProto.Type.TYPE_ENUM /}
  {let $isRepeated: $field.label == google.protobuf.FieldDescriptorProto.Label.LABEL_REPEATED /}
  {let $initData kind="js"}data = this.data_['{$field.number}'];{/let}
  {let $typeStr kind="text"}{if $isRepeated}!Array<!{$type}>{else}!{$type}{/if}{/let}
  {let $isMessage: $type != 'boolean' and $type != 'string' and $type != 'number' and not $isEnum /}
  {let $accessorSuffix kind="text"}{toUpperCamelCase($field.name)}{if $isRepeated}List{/if}{/let}

{literal}
  {/literal}{dynamicJs('/** @return {' + $typeStr + '} */')}{literal}
  get{/literal}{dynamicJs($accessorSuffix)}{literal}() {
    {/literal}
    {if $isMessage}
      {if $isRepeated}
        return pd.getMessageListField_(this, {$field.number}, {typeName($field.typeName)});
      {else}
        return pd.getMessageField_(this, {$field.number}, {typeName($field.typeName)});
      {/if}
    {elseif $isRepeated}
      return pd.getPrimitiveListField_(this, {$field.number});
    {else}
      return pd.getPrimitiveField_(this, {$field.number},{sp}
      {if $type == 'boolean'}false
      {elseif $type == 'string'}''
      {elseif $isEnum}{dynamicJs('/** @type {' + $type + '} */')}(0)
      {else}0
      {/if});
    {/if}
{literal}
  }

  {/literal}{dynamicJs('/** @param {' + $typeStr + '} value */')}{literal}
  set{/literal}{dynamicJs($accessorSuffix)}{literal}(value) {
    {/literal}
    {if $isRepeated or $isMessage}
      pd.setComplexField_(this, {$field.number}, value);
    {else}
      pd.setPrimitiveField_(this, {$field.number}, value);
    {/if}
    {literal}
  }
{/literal}
{/foreach}

{literal}};
{/literal}
{/template}
