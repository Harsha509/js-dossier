{namespace dossier.soy.proto}

{template .render}
  {@param data: list<[enum: google.protobuf.EnumDescriptorProto,
                      message: google.protobuf.DescriptorProto,
                      name: string]>}

{literal}// GENERATED CODE - DO NOT EDIT
goog.provide('proto.dossier');
{/literal}
{foreach $record in $data}
goog.provide('{$record.name}');{\n}
{/foreach}
{literal}

goog.require('soydata.SanitizedHtml');
goog.require('soydata.SanitizedUri');
goog.require('soydata.VERY_UNSAFE');

/** @private @const */
proto.dossier.DEFAULT_INSTANCES_ = new Map;

goog.scope(function() {

const DEFAULT_INSTANCES = proto.dossier.DEFAULT_INSTANCES_;
const SanitizedHtml = soydata.SanitizedHtml;
const SanitizedUri = soydata.SanitizedUri;
const ordainSanitizedHtml = soydata.VERY_UNSAFE.ordainSanitizedHtml;
const ordainSanitizedUri = soydata.VERY_UNSAFE.ordainSanitizedUri;
{/literal}

{foreach $record in $data}
  {if $record.enum}
    {call .renderEnum}
      {param descriptor: $record.enum /}
      {param name: $record.name /}
    {/call}
  {else}
    {call .renderMessage}
      {param descriptor: $record.message /}
      {param name: $record.name /}
    {/call}
  {/if}
{/foreach}

{literal}
});  // goog.scope
{/literal}
{/template}


{template .renderEnum}
  {@param descriptor: google.protobuf.EnumDescriptorProto}
  {@param name: string}

{literal}
/** @enum {number} */
{/literal}{$name}{literal} = {
{/literal}

{foreach $value in $descriptor.value}
  {sp}{sp}
  {$value.name}: {$value.number}
  {if not isLast($value)},{/if}
  {\n}
{/foreach}

{literal}};
{/literal}
{/template}


{template .renderMessage}
  {@param descriptor: google.protobuf.DescriptorProto}
  {@param name: string}

{\n}
{$name}{literal} = class {
  constructor(/** Object= */opt_data) {
    /** @private @const {!Object} */
    this.data_ = opt_data || {};

    /** @private @const */
    this.converted_ = new Map;
  }

  /** @return {!{/literal}{$name}{literal}} */
  static get DEFAULT_INSTANCE() {
    let instance = DEFAULT_INSTANCES.get({/literal}{$name}{literal});
    if (!instance) {
      instance = new {/literal}{$name}{literal}({});
      DEFAULT_INSTANCES.set({/literal}{$name}{literal}, instance);
    }
    return instance;
  }

  /**
   * @param {!{/literal}{$name}{literal}} value
   * @return {!{/literal}{$name}{literal}}
   */
  static clone(value) {
    let data = Object.assign({}, value.data_);
    return new {/literal}{$name}{literal}(data);
  }
{/literal}

{foreach $field in $descriptor.field}
  {let $type kind="text"}
    {switch $field.type}
      // Not all number types can be converted to JS, but we include them for completeness.
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FLOAT}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_INT64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_UINT64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_INT32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED64}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT32}number
      {case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT64}number

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL}boolean

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_BYTES}string

      {case google.protobuf.FieldDescriptorProto.Type.TYPE_STRING}
        {if isSanitizedHtml($name, $field.name)}
          SanitizedHtml
        {elseif isSanitizedUri($name, $field.name)}
          SanitizedUri
        {else}
          string
        {/if}

      {default}{typeName($field.typeName)}
    {/switch}
  {/let}

  {let $isEnum: $field.type == google.protobuf.FieldDescriptorProto.Type.TYPE_ENUM /}
  {let $isRepeated: $field.label == google.protobuf.FieldDescriptorProto.Label.LABEL_REPEATED /}
  {let $initData kind="html"}data = this.data_['{$field.number}'];{/let}
  {let $returnType kind="html"}{if $isRepeated}{arrayType('!' + $type)}{else}!{$type}{/if}{/let}
  {let $isMessage: $type != 'boolean' and $type != 'string' and $type != 'number' and not $isEnum /}

{literal}
  /**
   * @return {{/literal}{$returnType}{literal}}
   */
  get {/literal}{toLowerCamelCase($field.name)}{literal}() {
    {/literal}
    {if $isRepeated or $isMessage}
      if (this.converted_.has('{$field.number}')) return this.converted_.get('{$field.number}');{\n}
      {literal}    {/literal}
    {/if}
    let data = this.data_['{$field.number}'];{\n}

    {if $type == 'SanitizedHtml' or $type == 'SanitizedUri'}
      {literal}    {/literal}
      {call .returnSanitizedData_}
        {param isRepeated: $isRepeated /}
        {param fieldNumber: $field.number /}
        {param sanitizer: $type == 'SanitizedHtml' ? 'ordainSanitizedHtml' : 'ordainSanitizedUri' /}
      {/call}
    {elseif $isRepeated}
      {literal}    {/literal}
      {if $isMessage}
        let value = data ? data.map(i => new {$type}(i)) : [];{\n}
      {else}
        let value = data || [];{\n}
      {/if}
      {literal}    this.converted_.set('{/literal}{$field.number}', value);{\n}
      {literal}    return value;{/literal}
    {elseif $isMessage}
      {literal}    let value = data ? {/literal}
      new {$type}(data) : {$type}.DEFAULT_INSTANCE;{\n}
      {literal}    this.converted_.set('{/literal}{$field.number}', value);{\n}
      {literal}    return value;{/literal}
    {else}
      {let $defaultValue kind="html"}
        {if $type == 'boolean'}false
        {elseif $type == 'string'}''
        {else}0
        {/if}
      {/let}
      {literal}    return data || {/literal}{$defaultValue};
    {/if}
{literal}
  }

  /**
   * @param {{/literal}{$returnType}{literal}} value
   */
  set {/literal}{toLowerCamelCase($field.name)}{literal}(value) {
    {/literal}
    {if $isRepeated or $isMessage}
      this.converted_.set('{$field.number}', value);
    {else}
      this.data_['{$field.number}'] = value;
    {/if}
    {literal}
  }
{/literal}
{/foreach}

{literal}};
{/literal}
{/template}


{template .returnSanitizedData_ private="true"}
  {@param isRepeated: bool}
  {@param sanitizer: string}
  {@param fieldNumber: int}
  {if $isRepeated}
    let value = data ? data.map({$sanitizer}) : [];{\n}
  {else}
    let value = {$sanitizer}(data || '');{\n}
  {/if}
  this.converted_.set('{$fieldNumber}', value);{\n}
  return value;{\n}
{/template}
