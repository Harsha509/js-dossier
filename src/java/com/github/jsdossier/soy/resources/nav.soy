{namespace dossier.soy.nav}


/**
 * Renders a list of modules as a tree.
 */
{template .moduleTree}
  {@param modules: list<dossier.TypeIndex.Entry>}
  {if length($modules)}
    <ul class="tree">
      {foreach $module in $modules}
        {call .treeItem_}
          {param type: $module /}
          {param subTypes: $module.child /}
        {/call}
      {/foreach}
    </ul>
  {/if}
{/template}


/**
 * Renders a list of types as a tree.
 */
{template .typeTree}
  {@param types: list<dossier.TypeIndex.Entry>}
  {if length($types)}
    <ul class="tree">
      {foreach $type in $types}
        {call .treeItem_}
          {param type: $type /}
          {param subTypes: $type.child /}
        {/call}
      {/foreach}
    </ul>
  {/if}
{/template}


{template .treeItem_ private="true"}
  {@param type: dossier.TypeIndex.Entry}
  {@param? subTypes: list<dossier.TypeIndex.Entry>}

  {let $namedType: $type.type /}
  {let $link kind="html"}
    {call dossier.soy.type.typeLink}
      {param content kind="text"}
        {$namedType.name}
      {/param}
      {param link: $namedType.link /}
      {param tabIndex: 1 /}
      {param classes: 'item' /}
    {/call}
  {/let}

  <li>
    {if $subTypes and length($subTypes)}
      <div class="toggle">
        {$link}
        <i class="material-icons">expand_more</i>
      </div>
      {call .typeTree}
        {param types: $subTypes /}
      {/call}
    {else}
      {$link}
    {/if}
{/template}
