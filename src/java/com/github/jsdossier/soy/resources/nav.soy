{namespace dossier.soy.nav}


/**
 * Renders the contents of a nav drawer.
 */
{template .drawerContents}
  {@param modules: list<dossier.Index.Entry>}
  {@param types: list<dossier.Index.Entry>}
  {@param links: list<dossier.Link>}

  <section>
    <a class="title" href="index.html" tabindex="1">Overview</a>
  </section>
  {if length($modules)}
    <section class="modules">
      <div class="toggle">
        <div class="title">
          <span class="item" tabindex="1">Modules</span>
          <i class="material-icons">expand_more</i>
        </div>
      </div>
      {call .moduleTree_ data="all" /}
    </section>
  {/if}
  {if length($types)}
    <section class="types">
      <div class="toggle">
        <div class="title">
          <span class="item" tabindex="1">Types</span>
          <i class="material-icons">expand_more</i>
        </div>
      </div>
      {call .typeTree_ data="all" /}
    </section>
  {/if}
  {foreach $link in $links}
    {if $link.href and $link.text}
      <section>
        <a class="title" href="{sanitizeUri($link.href)}" tabindex="1">{$link.text}</a>
      </section>
    {/if}
  {/foreach}
{/template}


/**
 * Renders a list of modules as a tree.
 */
{template .moduleTree_ private="true"}
  {@param modules: list<dossier.Index.Entry>}
  {if length($modules)}
    <ul class="tree">
      {foreach $module in $modules}
        {call .treeItem_}
          {param type: $module /}
          {param subTypes: $module.childList /}
        {/call}
      {/foreach}
    </ul>
  {/if}
{/template}


/**
 * Renders a list of types as a tree.
 */
{template .typeTree_ private="true"}
  {@param types: list<dossier.Index.Entry>}
  {if length($types)}
    <ul class="tree">
      {foreach $type in $types}
        {call .treeItem_}
          {param type: $type /}
          {param subTypes: $type.childList /}
        {/call}
      {/foreach}
    </ul>
  {/if}
{/template}


{template .treeItem_ private="true"}
  {@param type: dossier.Index.Entry}
  {@param? subTypes: list<dossier.Index.Entry>}

  {let $namedType: $type.type /}
  {let $link kind="html"}
    {call dossier.soy.type.typeLink}
      {param content kind="text"}
        {$namedType.name}
      {/param}
      {param href kind="text"}
        {if $namedType.link}
          {sanitizeUri($namedType.link.href)}
        {/if}
      {/param}
      {param tabIndex: 1 /}
      {param classes: 'item' /}
    {/call}
  {/let}

  <li>
    {if $subTypes and length($subTypes)}
      <div class="toggle">
        {$link}
        <i class="material-icons">expand_more</i>
      </div>
      {call .typeTree_}
        {param types: $subTypes /}
      {/call}
    {else}
      {$link}
    {/if}
{/template}
