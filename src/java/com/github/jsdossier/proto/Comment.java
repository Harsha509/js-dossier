// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dossier.proto

package com.github.jsdossier.proto;

/**
 * Protobuf type {@code dossier.Comment}
 *
 * <pre>
 * Represents a tokenized JSDoc comment string. Each token represents pre-formatted
 * HTML, literal text, a link, or a link of literal text.
 * </pre>
 */
public  final class Comment extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:dossier.Comment)
    CommentOrBuilder {
  // Use Comment.newBuilder() to construct.
  private Comment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Comment() {
    token_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Comment(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              token_ = new java.util.ArrayList<com.github.jsdossier.proto.Comment.Token>();
              mutable_bitField0_ |= 0x00000001;
            }
            token_.add(input.readMessage(com.github.jsdossier.proto.Comment.Token.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        token_ = java.util.Collections.unmodifiableList(token_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.jsdossier.proto.Comment.class, com.github.jsdossier.proto.Comment.Builder.class);
  }

  public interface TokenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dossier.Comment.Token)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    java.lang.String getText();
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <code>optional string html = 2;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    java.lang.String getHtml();
    /**
     * <code>optional string html = 2;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    com.google.protobuf.ByteString
        getHtmlBytes();

    /**
     * <code>optional .dossier.expression.TypeLink link = 3;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    boolean hasLink();
    /**
     * <code>optional .dossier.expression.TypeLink link = 3;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    com.github.jsdossier.proto.TypeLink getLink();
    /**
     * <code>optional .dossier.expression.TypeLink link = 3;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    com.github.jsdossier.proto.TypeLinkOrBuilder getLinkOrBuilder();

    public com.github.jsdossier.proto.Comment.Token.ContentCase getContentCase();
  }
  /**
   * Protobuf type {@code dossier.Comment.Token}
   */
  public  static final class Token extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dossier.Comment.Token)
      TokenOrBuilder {
    // Use Token.newBuilder() to construct.
    private Token(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Token() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Token(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              contentCase_ = 1;
              content_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              contentCase_ = 2;
              content_ = s;
              break;
            }
            case 26: {
              com.github.jsdossier.proto.TypeLink.Builder subBuilder = null;
              if (link_ != null) {
                subBuilder = link_.toBuilder();
              }
              link_ = input.readMessage(com.github.jsdossier.proto.TypeLink.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(link_);
                link_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.jsdossier.proto.Comment.Token.class, com.github.jsdossier.proto.Comment.Token.Builder.class);
    }

    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite {
      TEXT(1),
      HTML(2),
      CONTENT_NOT_SET(0);
      private int value = 0;
      private ContentCase(int value) {
        this.value = value;
      }
      public static ContentCase valueOf(int value) {
        switch (value) {
          case 1: return TEXT;
          case 2: return HTML;
          case 0: return CONTENT_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.valueOf(
          contentCase_);
    }

    public static final int TEXT_FIELD_NUMBER = 1;
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    public java.lang.String getText() {
      java.lang.Object ref = "";
      if (contentCase_ == 1) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (contentCase_ == 1) {
          content_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = "";
      if (contentCase_ == 1) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (contentCase_ == 1) {
          content_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HTML_FIELD_NUMBER = 2;
    /**
     * <code>optional string html = 2;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    public java.lang.String getHtml() {
      java.lang.Object ref = "";
      if (contentCase_ == 2) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (contentCase_ == 2) {
          content_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string html = 2;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHtmlBytes() {
      java.lang.Object ref = "";
      if (contentCase_ == 2) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (contentCase_ == 2) {
          content_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LINK_FIELD_NUMBER = 3;
    private com.github.jsdossier.proto.TypeLink link_;
    /**
     * <code>optional .dossier.expression.TypeLink link = 3;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    public boolean hasLink() {
      return link_ != null;
    }
    /**
     * <code>optional .dossier.expression.TypeLink link = 3;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    public com.github.jsdossier.proto.TypeLink getLink() {
      return link_ == null ? com.github.jsdossier.proto.TypeLink.getDefaultInstance() : link_;
    }
    /**
     * <code>optional .dossier.expression.TypeLink link = 3;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    public com.github.jsdossier.proto.TypeLinkOrBuilder getLinkOrBuilder() {
      return getLink();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (contentCase_ == 1) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, content_);
      }
      if (contentCase_ == 2) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, content_);
      }
      if (link_ != null) {
        output.writeMessage(3, getLink());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (contentCase_ == 1) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, content_);
      }
      if (contentCase_ == 2) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, content_);
      }
      if (link_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLink());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.github.jsdossier.proto.Comment.Token parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.jsdossier.proto.Comment.Token prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dossier.Comment.Token}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dossier.Comment.Token)
        com.github.jsdossier.proto.Comment.TokenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.jsdossier.proto.Comment.Token.class, com.github.jsdossier.proto.Comment.Token.Builder.class);
      }

      // Construct using com.github.jsdossier.proto.Comment.Token.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (linkBuilder_ == null) {
          link_ = null;
        } else {
          link_ = null;
          linkBuilder_ = null;
        }
        contentCase_ = 0;
        content_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_descriptor;
      }

      public com.github.jsdossier.proto.Comment.Token getDefaultInstanceForType() {
        return com.github.jsdossier.proto.Comment.Token.getDefaultInstance();
      }

      public com.github.jsdossier.proto.Comment.Token build() {
        com.github.jsdossier.proto.Comment.Token result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.jsdossier.proto.Comment.Token buildPartial() {
        com.github.jsdossier.proto.Comment.Token result = new com.github.jsdossier.proto.Comment.Token(this);
        if (contentCase_ == 1) {
          result.content_ = content_;
        }
        if (contentCase_ == 2) {
          result.content_ = content_;
        }
        if (linkBuilder_ == null) {
          result.link_ = link_;
        } else {
          result.link_ = linkBuilder_.build();
        }
        result.contentCase_ = contentCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.jsdossier.proto.Comment.Token) {
          return mergeFrom((com.github.jsdossier.proto.Comment.Token)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.jsdossier.proto.Comment.Token other) {
        if (other == com.github.jsdossier.proto.Comment.Token.getDefaultInstance()) return this;
        if (other.hasLink()) {
          mergeLink(other.getLink());
        }
        switch (other.getContentCase()) {
          case TEXT: {
            contentCase_ = 1;
            content_ = other.content_;
            onChanged();
            break;
          }
          case HTML: {
            contentCase_ = 2;
            content_ = other.content_;
            onChanged();
            break;
          }
          case CONTENT_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.jsdossier.proto.Comment.Token parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.jsdossier.proto.Comment.Token) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int contentCase_ = 0;
      private java.lang.Object content_;
      public ContentCase
          getContentCase() {
        return ContentCase.valueOf(
            contentCase_);
      }

      public Builder clearContent() {
        contentCase_ = 0;
        content_ = null;
        onChanged();
        return this;
      }


      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public java.lang.String getText() {
        java.lang.Object ref = "";
        if (contentCase_ == 1) {
          ref = content_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (contentCase_ == 1) {
            content_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = "";
        if (contentCase_ == 1) {
          ref = content_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (contentCase_ == 1) {
            content_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 1;
        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public Builder clearText() {
        if (contentCase_ == 1) {
          contentCase_ = 0;
          content_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        contentCase_ = 1;
        content_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>optional string html = 2;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public java.lang.String getHtml() {
        java.lang.Object ref = "";
        if (contentCase_ == 2) {
          ref = content_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (contentCase_ == 2) {
            content_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string html = 2;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHtmlBytes() {
        java.lang.Object ref = "";
        if (contentCase_ == 2) {
          ref = content_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (contentCase_ == 2) {
            content_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string html = 2;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public Builder setHtml(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 2;
        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string html = 2;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public Builder clearHtml() {
        if (contentCase_ == 2) {
          contentCase_ = 0;
          content_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string html = 2;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public Builder setHtmlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        contentCase_ = 2;
        content_ = value;
        onChanged();
        return this;
      }

      private com.github.jsdossier.proto.TypeLink link_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          com.github.jsdossier.proto.TypeLink, com.github.jsdossier.proto.TypeLink.Builder, com.github.jsdossier.proto.TypeLinkOrBuilder> linkBuilder_;
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public boolean hasLink() {
        return linkBuilder_ != null || link_ != null;
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public com.github.jsdossier.proto.TypeLink getLink() {
        if (linkBuilder_ == null) {
          return link_ == null ? com.github.jsdossier.proto.TypeLink.getDefaultInstance() : link_;
        } else {
          return linkBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder setLink(com.github.jsdossier.proto.TypeLink value) {
        if (linkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          link_ = value;
          onChanged();
        } else {
          linkBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder setLink(
          com.github.jsdossier.proto.TypeLink.Builder builderForValue) {
        if (linkBuilder_ == null) {
          link_ = builderForValue.build();
          onChanged();
        } else {
          linkBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder mergeLink(com.github.jsdossier.proto.TypeLink value) {
        if (linkBuilder_ == null) {
          if (link_ != null) {
            link_ =
              com.github.jsdossier.proto.TypeLink.newBuilder(link_).mergeFrom(value).buildPartial();
          } else {
            link_ = value;
          }
          onChanged();
        } else {
          linkBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder clearLink() {
        if (linkBuilder_ == null) {
          link_ = null;
          onChanged();
        } else {
          link_ = null;
          linkBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public com.github.jsdossier.proto.TypeLink.Builder getLinkBuilder() {
        
        onChanged();
        return getLinkFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public com.github.jsdossier.proto.TypeLinkOrBuilder getLinkOrBuilder() {
        if (linkBuilder_ != null) {
          return linkBuilder_.getMessageOrBuilder();
        } else {
          return link_ == null ?
              com.github.jsdossier.proto.TypeLink.getDefaultInstance() : link_;
        }
      }
      /**
       * <code>optional .dossier.expression.TypeLink link = 3;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.github.jsdossier.proto.TypeLink, com.github.jsdossier.proto.TypeLink.Builder, com.github.jsdossier.proto.TypeLinkOrBuilder> 
          getLinkFieldBuilder() {
        if (linkBuilder_ == null) {
          linkBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.github.jsdossier.proto.TypeLink, com.github.jsdossier.proto.TypeLink.Builder, com.github.jsdossier.proto.TypeLinkOrBuilder>(
                  getLink(),
                  getParentForChildren(),
                  isClean());
          link_ = null;
        }
        return linkBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dossier.Comment.Token)
    }

    // @@protoc_insertion_point(class_scope:dossier.Comment.Token)
    private static final com.github.jsdossier.proto.Comment.Token DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.jsdossier.proto.Comment.Token();
    }

    public static com.github.jsdossier.proto.Comment.Token getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Token>
        PARSER = new com.google.protobuf.AbstractParser<Token>() {
      public Token parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Token(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Token> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Token> getParserForType() {
      return PARSER;
    }

    public com.github.jsdossier.proto.Comment.Token getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int TOKEN_FIELD_NUMBER = 1;
  private java.util.List<com.github.jsdossier.proto.Comment.Token> token_;
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public java.util.List<com.github.jsdossier.proto.Comment.Token> getTokenList() {
    return token_;
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public java.util.List<? extends com.github.jsdossier.proto.Comment.TokenOrBuilder> 
      getTokenOrBuilderList() {
    return token_;
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public int getTokenCount() {
    return token_.size();
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public com.github.jsdossier.proto.Comment.Token getToken(int index) {
    return token_.get(index);
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public com.github.jsdossier.proto.Comment.TokenOrBuilder getTokenOrBuilder(
      int index) {
    return token_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < token_.size(); i++) {
      output.writeMessage(1, token_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < token_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, token_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.github.jsdossier.proto.Comment parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.jsdossier.proto.Comment prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code dossier.Comment}
   *
   * <pre>
   * Represents a tokenized JSDoc comment string. Each token represents pre-formatted
   * HTML, literal text, a link, or a link of literal text.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dossier.Comment)
      com.github.jsdossier.proto.CommentOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.jsdossier.proto.Comment.class, com.github.jsdossier.proto.Comment.Builder.class);
    }

    // Construct using com.github.jsdossier.proto.Comment.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getTokenFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (tokenBuilder_ == null) {
        token_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        tokenBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_descriptor;
    }

    public com.github.jsdossier.proto.Comment getDefaultInstanceForType() {
      return com.github.jsdossier.proto.Comment.getDefaultInstance();
    }

    public com.github.jsdossier.proto.Comment build() {
      com.github.jsdossier.proto.Comment result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.github.jsdossier.proto.Comment buildPartial() {
      com.github.jsdossier.proto.Comment result = new com.github.jsdossier.proto.Comment(this);
      int from_bitField0_ = bitField0_;
      if (tokenBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          token_ = java.util.Collections.unmodifiableList(token_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.token_ = token_;
      } else {
        result.token_ = tokenBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.jsdossier.proto.Comment) {
        return mergeFrom((com.github.jsdossier.proto.Comment)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.jsdossier.proto.Comment other) {
      if (other == com.github.jsdossier.proto.Comment.getDefaultInstance()) return this;
      if (tokenBuilder_ == null) {
        if (!other.token_.isEmpty()) {
          if (token_.isEmpty()) {
            token_ = other.token_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTokenIsMutable();
            token_.addAll(other.token_);
          }
          onChanged();
        }
      } else {
        if (!other.token_.isEmpty()) {
          if (tokenBuilder_.isEmpty()) {
            tokenBuilder_.dispose();
            tokenBuilder_ = null;
            token_ = other.token_;
            bitField0_ = (bitField0_ & ~0x00000001);
            tokenBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getTokenFieldBuilder() : null;
          } else {
            tokenBuilder_.addAllMessages(other.token_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.jsdossier.proto.Comment parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.jsdossier.proto.Comment) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.github.jsdossier.proto.Comment.Token> token_ =
      java.util.Collections.emptyList();
    private void ensureTokenIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        token_ = new java.util.ArrayList<com.github.jsdossier.proto.Comment.Token>(token_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.jsdossier.proto.Comment.Token, com.github.jsdossier.proto.Comment.Token.Builder, com.github.jsdossier.proto.Comment.TokenOrBuilder> tokenBuilder_;

    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public java.util.List<com.github.jsdossier.proto.Comment.Token> getTokenList() {
      if (tokenBuilder_ == null) {
        return java.util.Collections.unmodifiableList(token_);
      } else {
        return tokenBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public int getTokenCount() {
      if (tokenBuilder_ == null) {
        return token_.size();
      } else {
        return tokenBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token getToken(int index) {
      if (tokenBuilder_ == null) {
        return token_.get(index);
      } else {
        return tokenBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder setToken(
        int index, com.github.jsdossier.proto.Comment.Token value) {
      if (tokenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenIsMutable();
        token_.set(index, value);
        onChanged();
      } else {
        tokenBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder setToken(
        int index, com.github.jsdossier.proto.Comment.Token.Builder builderForValue) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.set(index, builderForValue.build());
        onChanged();
      } else {
        tokenBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(com.github.jsdossier.proto.Comment.Token value) {
      if (tokenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenIsMutable();
        token_.add(value);
        onChanged();
      } else {
        tokenBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(
        int index, com.github.jsdossier.proto.Comment.Token value) {
      if (tokenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenIsMutable();
        token_.add(index, value);
        onChanged();
      } else {
        tokenBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(
        com.github.jsdossier.proto.Comment.Token.Builder builderForValue) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.add(builderForValue.build());
        onChanged();
      } else {
        tokenBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(
        int index, com.github.jsdossier.proto.Comment.Token.Builder builderForValue) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.add(index, builderForValue.build());
        onChanged();
      } else {
        tokenBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addAllToken(
        java.lang.Iterable<? extends com.github.jsdossier.proto.Comment.Token> values) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, token_);
        onChanged();
      } else {
        tokenBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder clearToken() {
      if (tokenBuilder_ == null) {
        token_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        tokenBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder removeToken(int index) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.remove(index);
        onChanged();
      } else {
        tokenBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token.Builder getTokenBuilder(
        int index) {
      return getTokenFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.TokenOrBuilder getTokenOrBuilder(
        int index) {
      if (tokenBuilder_ == null) {
        return token_.get(index);  } else {
        return tokenBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public java.util.List<? extends com.github.jsdossier.proto.Comment.TokenOrBuilder> 
         getTokenOrBuilderList() {
      if (tokenBuilder_ != null) {
        return tokenBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(token_);
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token.Builder addTokenBuilder() {
      return getTokenFieldBuilder().addBuilder(
          com.github.jsdossier.proto.Comment.Token.getDefaultInstance());
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token.Builder addTokenBuilder(
        int index) {
      return getTokenFieldBuilder().addBuilder(
          index, com.github.jsdossier.proto.Comment.Token.getDefaultInstance());
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public java.util.List<com.github.jsdossier.proto.Comment.Token.Builder> 
         getTokenBuilderList() {
      return getTokenFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.jsdossier.proto.Comment.Token, com.github.jsdossier.proto.Comment.Token.Builder, com.github.jsdossier.proto.Comment.TokenOrBuilder> 
        getTokenFieldBuilder() {
      if (tokenBuilder_ == null) {
        tokenBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.jsdossier.proto.Comment.Token, com.github.jsdossier.proto.Comment.Token.Builder, com.github.jsdossier.proto.Comment.TokenOrBuilder>(
                token_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        token_ = null;
      }
      return tokenBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:dossier.Comment)
  }

  // @@protoc_insertion_point(class_scope:dossier.Comment)
  private static final com.github.jsdossier.proto.Comment DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.jsdossier.proto.Comment();
  }

  public static com.github.jsdossier.proto.Comment getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Comment>
      PARSER = new com.google.protobuf.AbstractParser<Comment>() {
    public Comment parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new Comment(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<Comment> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Comment> getParserForType() {
    return PARSER;
  }

  public com.github.jsdossier.proto.Comment getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

