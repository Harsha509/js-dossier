// Copyright 2013-2016 Jason Leyba
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "options.proto";
import "expression.proto";

option java_package = "com.github.jsdossier.proto";
option java_multiple_files = true;

package dossier;


// Describes a documented source file.
message SourceFile {
  // The file's base name.
  string base_name = 1;
  // The path to the file; may be relative to some unspecified directory.
  string path = 2;
  // The individual lines in the file. Each line should not be HTML escaped.
  repeated string lines = 3;
}


// Describes the resources to include in a generated HTML page.
message Resources {
  // Paths to stylesheets to link to in the generated page.
  repeated string css = 1 [(options.sanitized).uri = true];
  // Paths to JavaScript files to include in the generated page's head.
  repeated string head_script = 2 [(options.sanitized).uri = true];
  // Paths to JavaScript files to include in the generated page after
  // the DOM has been defined.
  repeated string tail_script = 3 [(options.sanitized).uri = true];
}


// Describes a type to link to.
message Link {
  // The link display text.
  string text = 1;
  // The link href.
  string href = 2 [(options.sanitized).uri = true];
}


// Defines a link to a symbol's definition in its rendered source file.
message SourceLink {
  // Path from the current file to the rendered source file.
  string path = 1  [(options.sanitized).uri = true];

  // The line in the source file containing the symbol, if known.
  int32 line = 2;

  // A user-provided URI to use for the source link instead of |path| and
  // |line|. This URI is not sanitized.
  string uri = 3;
}


// Represents a tokenized JSDoc comment string. Each token represents pre-formatted
// HTML, literal text, a link, or a link of literal text.
message Comment {

  message Token {
    oneof content {
      // The text content for this token; text should be escaped when rendered.
      string text = 1;

      // The pre-escaped html content for this token.
      string html = 2 [(options.sanitized).html = true];
    }

    // If set, this token will be rendered as a hyperlink.
    dossier.expression.TypeLink link = 3;
  }

  // The tokens that comprise this comment.
  repeated Token token = 1;
}


// Describes a type/property's visibility.
enum Visibility {
  // The type is globally accessible.
  PUBLIC = 0;
  // The type may only be used by subclasses or other code in the same file.
  PROTECTED = 1;
  // The type may only be used by other code in the same file.
  PRIVATE = 2;
  // The type may only be used by subclasses, or other code in the same
  // package.
  PACKAGE = 3;
}


message Tags {
  bool is_const = 1;
  bool is_deprecated = 2;
  bool is_dict = 3;
  bool is_final = 4;
  bool is_interface = 5;
  bool is_module = 6;
  bool is_struct = 7;
  bool is_default = 8;
  bool is_record = 9;
}


// Describes the basic properties for a documented JavaScript property.
message BaseProperty {
  // The property's name; this should not be the fully qualified name.
  string name = 1;

  // Link to the location in the source file where this property is defined.
  SourceLink source = 2;

  // The property's block comment.
  Comment description = 3;

  // Whether this property is deprecated.
  Comment deprecation = 4;
  Visibility visibility = 5;
  Tags tags = 6;

  // The class or interface that defines this property.
  dossier.expression.NamedType defined_by = 7;

  // Parent class that defines this property.
  dossier.expression.NamedType overrides = 8;

  // Interfaces that define this property.
  repeated dossier.expression.NamedType specified_by = 9;

  repeated Comment see_also = 10;
}


// Describes a non-function JavaScript property.
message Property {
  BaseProperty base = 1;
  dossier.expression.TypeExpression type = 2;
}


// Describes a function JavaScript property.
message Function {
  message Detail {
    string name = 1;
    dossier.expression.TypeExpression type = 2;
    Comment description = 3;
  }

  BaseProperty base = 1;
  repeated string template_name = 2;
  bool is_constructor = 3;
  repeated Detail parameter = 4;
  Detail return = 5;
  repeated Detail thrown = 6;
}


// Describes an enumeration.
message Enumeration {
  message Value {
    string name = 1;
    Comment description = 2;
    Comment deprecation = 3;
  }

  dossier.expression.TypeExpression type = 1;
  repeated Value value = 2;
  Visibility visibility = 3;
}

// Describes how to build the side index for a generated page.
message Index {
  // Defines the href from the current page to the main index.
  string home = 1 [(options.sanitized).uri = true];

  // Whether to generate the global type section.
  bool include_types = 2;

  // Whether to generate the module type section.
  bool include_modules = 3;

  // Additional links to include in the navigation pane.
  repeated Link link = 4;

  // When this index was generated.
  int64 timestamp = 5;
}


// Describes a JavaScript type to generate documentation for. Each |JsType|
// message describes a class, enum, interface, or namespace.
message JsType {

  // Short description for a type defined by this |JsType|.
  message TypeSummary {
    string name = 1;                                   // The type name.
    string href = 2 [(options.sanitized).uri = true];  // The hyperlink for the actual type.
    Comment summary = 3;                               // The summary sentence for this type.
    Tags tags = 4;
  }

  message NestedTypes {
    repeated TypeSummary class = 1;
    repeated TypeSummary enum = 2;
    repeated TypeSummary interface = 3;
  }

  string name = 1;
  SourceLink source = 5;
  NestedTypes nested = 6;
  Comment description = 7;
  Tags tags = 8;
  Comment deprecation = 9;
  repeated Property type_def = 10;

  Enumeration enumeration = 11;

  repeated Function static_function = 12;
  repeated Property static_property = 13;

  // Describes the main function for this type. This is typically a class
  // constructor, but may also be the main function for a namespace (which
  // all other properties are hung off of).
  Function main_function = 14;

  // Instance methods for this type.
  repeated Function method = 15;

  // Instance properties for this type.
  repeated Property field = 16;

  // List of inherited types for a class. This should be empty if |is_class|
  // is false. Classes should be listed in order, with the root type first.
  repeated dossier.expression.NamedType extended_type = 18;

  // The interfaces implemented by a class/extended by an interface. This
  // list should be empty if |is_class| and |is_interface| are false.
  repeated dossier.expression.NamedType implemented_type = 19;

  // Known subtypes of this type. If |is_class| is true, this will contain the
  // know direct subclasses. If |is_interface| is true, this will contain the
  // known subinterfaces.
  repeated dossier.expression.NamedType subtype = 26;

  // Known implementations of this type. Will be empy if |is_interface| is false.
  repeated dossier.expression.NamedType implementation = 27;

  repeated Property compiler_constant = 20;

  // Link to the module or namespace this type belongs to.
  message ParentLink {
    dossier.expression.NamedType type = 1;
    bool is_module = 2;
  }
  ParentLink parent = 21;

  // Link to another type that this type is an alias of.
  dossier.expression.NamedType aliased_type = 22;
  repeated dossier.expression.NamedType known_alias = 28;

  // Base name for the rendered file for this type.
  string filename = 23;

  // Qualified display name for this type.
  string qualified_name = 24;

  // Re-exported modules.
  repeated Property reexported_module = 25;

  // Next ID: 29
}


message PageData {
  message Markdown {
    string title = 1;
    Comment content = 2;
  }

  message TypeCollection {
    repeated JsType type = 1;
  }

  Resources resources = 1;
  Index index = 2;

  oneof content {
    TypeCollection types = 3;
    Markdown markdown = 4;
    SourceFile file = 5;
  }
}
