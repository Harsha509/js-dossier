option java_package = "com.github.jleyba.dossier.proto";

package dossier;

// Describes a documented source file.
message SourceFile {
  // The file's base name.
  required string base_name = 1;
  // The path to the file; may be relative to some unspecified directory.
  required string path = 2;
  // The individual lines in the file. Each line should not be HTML escaped.
  repeated string lines = 3;
}


// Describes the resources to include in a generated HTML page.
message Resources {
  // Paths to stylesheets to link to in the generated page.
  repeated string css = 1;
  // Paths to JavaScript files to include in the generated page.
  repeated string script = 2;
}


// Describes a type to link to.
message TypeLink {
  // The link display text.
  required string text = 1;
  // The link href.
  required string href = 2;
}


// Represents a tokenized JSDoc comment string. Each token represents pre-formatted
// HTML, literal text, a link, or a link of literal text.
message Comment {

  message Token {
    // The text content for this token.
    required string text = 1;

    // Whether to render this token as a literal, escaping all
    // HTML content.
    optional bool is_literal = 2 [default = false];

    // Whether this token should be rendered using code formatting;
    // This option implies |is_literal| is true.
    optional bool is_code = 3 [default = false];

    // If set, this token will be rendered as a hyperlink.
    optional string href = 4;

    // Whether this token represents a linked type that could not be resolved.
    optional bool unresolved_link = 5 [default = false];
  }

  // The tokens that comprise this comment.
  repeated Token token = 1;
}


// Describes a deprecation notice.
message Deprecation {
  optional Comment notice = 1;
}


// Describes a type/property's visibility.
enum Visibility {
  // The type is globally accessible.
  PUBLIC = 0;
  // The type may only be used by subclasses or other code in the same file.
  PROTECTED = 1;
  // The type may only be used by other code in the same file.
  PRIVATE = 2;
  // The type may only be used by subclasses, or other code in the same
  // package.
  PACKAGE = 3;
}


message Tags {
  optional bool is_const = 1;
  optional bool is_deprecated = 2;
  optional bool is_dict = 3;
  optional bool is_final = 4;
  optional bool is_interface = 5;
  optional bool is_module = 6;
  optional bool is_struct = 7;
}


// Describes the basic properties for a documented JavaScript property.
message BaseProperty {
  // The property's name; this should not be the fully qualified name.
  required string name = 1;
  // Link to the location in the source file where this property is defined.
  required string source = 2;
  // The property's block comment.
  required Comment description = 3;
  // Whether this property is deprecated.
  optional Deprecation deprecation = 4;
  optional Visibility visibility = 5 [default = PUBLIC];
  optional Tags tags = 6;
}


// Describes a non-function JavaScript property.
message Property {
  required BaseProperty base = 1;
  // HTML snippet declaring the property type. May be omitted if the type is
  // unknown.
  optional string type_html = 2;
}


// Describes a function JavaScript property.
message Function {
  message Detail {
    optional string name = 1;
    optional string type_html = 2;
    optional Comment description = 3;
  }

  required BaseProperty base = 1;
  repeated string template_name = 2;
  optional bool is_constructor = 3 [default = false];
  repeated Detail parameter = 4;
  optional Detail return = 5;
  repeated Detail thrown = 6;
}


// Describes the properties and functions defined on a prototype object.
message Prototype {
  // The name of the class/interface this prototype belongs to.
  required string name = 1;
  // A link to the class/interface documentation (if available).
  optional string href = 2;

  repeated Function function = 3;
  repeated Property property = 4;
}


// Describes an enumeration.
message Enumeration {
  message Value {
    required string name = 1;
    optional Comment description = 2;
    optional Deprecation deprecation = 3;
  }

  required string type_html = 1;
  repeated Value value = 2;
  optional Visibility visibility = 3 [default = PUBLIC];
}

// Describes how to build the side index for a generated page.
message Index {
  message Module {
    required TypeLink link = 1;
    repeated TypeLink type = 2;
  }

  // Defines the href from the current page to the main index.
  required string home = 1;

  // Links to the global JavaScript types.
  repeated TypeLink type = 2;

  // Links to JavaScript modules.
  repeated Module module = 3;
}


// Describes a JavaScript type to generate documentation for. Each |JsType|
// message describes a class, enum, interface, or namespace.
message JsType {

  // Short description for a type defined when this |JsType|.
  message TypeSummary {
    required string name = 1;      // The type name.
    required string href = 2;      // The hyperlink for the actual type.
    required Comment summary = 3;  // The summary sentence for this type.
  }

  // Describes a typedef defined within this type.
  message TypeDef {
    required string name = 1;
    required string type_html = 2;
    required string href = 3;
    required Comment description = 4;
    optional Deprecation deprecation = 5;
    optional Visibility visibility = 6 [default = PUBLIC];
  }

  required string name = 1;
  required string source = 5;
  repeated TypeSummary nested = 6;
  required Comment description = 7;
  required Tags tags = 8;
  optional Deprecation deprecation = 9;
  repeated TypeDef type_def = 10;

  optional Enumeration enumeration = 11;

  repeated Function static_function = 12;
  repeated Property static_property = 13;

  // Describes the main function for this type. This is typically a class
  // constructor, but may also be the main function for a namespace (which
  // all other properties are hung off of).
  optional Function main_function = 14;

  // The prototype descriptors for this type (if it is a class or interface).
  // Prototypes should be specified in reverse order, from the current class
  // to the root. The presence of this field designates this type as a
  // class or interface.
  repeated Prototype prototype = 15;

  // Hacks needed for the soy templates to know whether the prototype chain
  // has any methods or properties to render.
  optional bool has_instance_methods = 16 [default = false];
  optional bool has_instance_properties = 17 [default = false];

  // List of inherited types for a class. This should be empty if |is_class|
  // is false. Classes should be listed in order, with the root type first.
  repeated TypeLink extended_type = 18;

  // The interfaces implemented by a class/extended by an interface. This
  // list should be empty if |is_class| and |is_interface| are false.
  repeated TypeLink implemented_type = 19;

  repeated Property compiler_constant = 20;

  // Link to the module this type belongs to.
  optional TypeLink module = 21;

  // Link to another type that this type is an alias of.
  optional TypeLink aliased_type = 22;
}



// Describes how to render the main index.
message IndexFileRenderSpec {
  // The resources to include.
  required Resources resources = 1;
  // The readme to display on the main page, if any.
  optional Comment readme = 2;
  // Navigation index.
  required Index index = 3;
}


// Describes how to render a source file.
message SourceFileRenderSpec {
  // The resources to include.
  required Resources resources = 1;
  // The file to render.
  required SourceFile file = 2;
  // Navigation index.
  required Index index = 3;
}


// Describes how to render documentation for a JavaScript type.
message JsTypeRenderSpec {
  // The type to generate documentation for.
  required JsType type = 1;
  // The resources to include.
  required Resources resources = 2;
  // Navigation index.
  required Index index = 3;
}
