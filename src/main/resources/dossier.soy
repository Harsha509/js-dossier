{namespace dossier}

/**
 * The main page header; responsible for setting the doctype, title, and
 * linking in any necessary stylesheets.
 *
 * @param title The page title.
 * @param resources A Resources object.
 */
{template .pageHeader}
  <!DOCTYPE html>
  <meta charset="UTF-8">
  <title>{$title}</title>
  {foreach $styleSheet in $resources.css}
    <link href="{$styleSheet}" rel="stylesheet" type="text/css">
  {/foreach}
{/template}


/**
 * Displays the navigation bar displayed at the top of each page.
 */
{template .topNav}
  <nav id="topnav">
    <div>
      <div id="menubutton"><label for="sidenav-toggle">Menu</label></div>
      <form id="searchbox">
        <div>
          <input type="search" placeholder="Search" tabindex="1">
        </div>
      </form>
    </div>
  </nav>
{/template}


/**
 * Generates the checkbox that toggles visibility of the side navigation pane.
 */
{template .sideNavToggle}
  <input type="checkbox" id="sidenav-toggle" />
{/template}


/**
 * Generates the place holder for the side navigation pane.
 *
 * @param? hasLicense Whether to link to the license file.
 */
{template .sideNav}
  <nav id="sidenav">
    <input type="checkbox" id="sidenav-types-ctrl" />
    <input type="checkbox" id="sidenav-files-ctrl" />

    /** The sidenav is filled in at runtime by dossier.js */
    <a id="sidenav-overview"><div><h4>Overview</h4></div></a>
    <div id="sidenav-types">
      <label for="sidenav-types-ctrl"><h4>Types</h4></label>
      <i>No data</i>
    </div>
    <div id="sidenav-files">
      <label for="sidenav-files-ctrl"><h4>Files</h4></label>
      <i>No data</i>
    </div>
    {if $hasLicense}
    <a href="license.html"><div><h4>License</h4></div></a>
    {/if}
  </nav>
{/template}


/**
 * Generates the page footer.
 *
 * @param scripts List of script files to include after the FOOTER element.
 */
{template .footer}
  <footer>
    <a href="https://github.com/jleyba/js-dossier">Generated by dossier</a>
  </footer>
  {foreach $script in $scripts}
    <script src="{$script}"></script>
  {/foreach}
{/template}


/**
 * Renders a block comment.
 *
 * @param comment A dossier.Comment object.
 * @param? omitLeadingTag Whether to omit the leading P tag.
 */
{template .comment}
  {if $comment and length($comment.token)}
    {if not $omitLeadingTag}<p>{/if}
    {foreach $token in $comment.token}
      {if $token.isCode}
        <code {if $token.href or $token.unresolvedLink} class="type"{/if}>
      {/if}
      {if $token.href}
        <a href="{$token.href}">
      {elseif $token.unresolvedLink}
        <a class="unresolved-link">
      {/if}
      {if $token.isCode or $token.isLiteral}
        {$token.text}
      {else}
        {$token.text |noAutoescape}
      {/if}
      {if $token.unresolvedLink or $token.href}</a>{/if}
      {if $token.isCode}</code>{/if}
    {/foreach}
  {/if}
{/template}


/**
 * Prints the hyperlink to a source file. This template will not print anything
 * if the source file's href is unknown.
 *
 * @param? href The link location.
 */
{template .sourceLink}
  {if $href}
    <a class="source" href="{$href}">code &raquo;</a>
  {/if}
{/template}


/**
 * Prints a graphical representation of a class's type inheritance:
 * goog.Foo
 *   - goog.Bar
 *       - goog.Bim
 *           - goog.Baz
 *
 * This template is a no-op if given a non-class descriptor.
 *
 * @param types A list of TypeLink objects.
 */
{template .classInheritance}
  {if length($types) >= 2}
    <pre><code>
    {foreach $type in $types}
      {if not isFirst($type)}
        {\n}{print '  '}
        {if index($type) > 1}
          {for $i in range(index($type) - 1)}{print '    '}{/for}
        {/if}
        &#x2514;{sp}
      {/if}
      {if isLast($type)}
        {$type.text}
      {else}
        <a href="{$type.href}">{$type.text}</a>
      {/if}
    {/foreach}
    </code></pre>
  {/if}
{/template}


/**
 * Prints information about the interfaces the given descriptor implements or
 * extends (if itself an interface).
 *
 * @param type A JsType object.
 */
{template .printInterfaces}
  // Note: if type is itself an interface, it will not be included in the
  // |implemented_type| list.
  {if length($type.implementedType)}
    <dl>
      <dt>
      All {if $type.isInterface}extended{else}implemented{/if} interfaces:
      <dd>
      {foreach $interface in $type.implementedType}
        <code><a href="{$interface.href}">{$interface.text}</a></code>
        {if not isLast($interface)},{sp}{/if}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Prints a notification that a descriptor is deprecated.
 *
 * @param deprecation A Deprecation message.
 */
{template .deprecationNotice}
  {if $deprecation and $deprecation.notice and length($deprecation.notice.token)}
    <div class="deprecation-notice">Deprecated:{sp}
      <span class="deprecation-reason">
        {call .comment}
          {param comment: $deprecation.notice /}
          {param omitLeadingTag: true /}
        {/call}
      </span>
    </div>
  {/if}
{/template}


/**
 * Generates the header for the main section of a type file.
 *
 * @param type A JsType object.
 */
{template .typeHeader}
  <header>
    <h1>
      {if $type.isInterface}
        Interface {$type.name}
      {elseif $type.constructor}
        Class {$type.name}
      {elseif $type.enumeration}
        Enum {$type.name}
      {else}
        Namespace {$type.name}
      {/if}
      {if $type.constructor and length($type.constructor.templateName)}
        .{call .printTemplateNames}
          {param names: $type.constructor.templateName /}
        {/call}
      {/if}
      {if $type.deprecation}
        <span class="deprecation-notice"> (deprecated)</span>
      {/if}
    </h1>

    {call .sourceLink}
      {param href: $type.source /}
    {/call}

    {if $type.enumeration}
      <dl><dt>Type: <code class="type">
        {$type.enumeration.typeHtml |noAutoescape}
      </code></dl>
    {/if}

    {call .classInheritance}
      {param types: $type.extendedType /}
    {/call}
    {call .printInterfaces}
      {param type: $type /}
    {/call}
    {call .deprecationNotice}
      {param deprecation: $type.deprecation /}
    {/call}
  </header>
{/template}


/**
 * Prints the values for the given enumeration.
 *
 * @param name The enumeration name.
 * @param enumeration A Dossier.Enumeration object.
 */
{template .enumValues}
  <h2>Values and Descriptions</h2>
  <div class="type-summary">
    {switch $enumeration.visibility}
      {case 'PUBLIC'}<dl class="public">
      {case 'PROTECTED'}<dl class="protected">
      {case 'PRIVATE'}<dl class="private">
    {/switch}
      {foreach $value in $enumeration.value}
        <dt>
          <a class="enum member{if $value.deprecation} deprecation-notice{/if}"
             name="{$name + '.' + $value.name}">{$value.name}</a>
          {if ($value.description and length($value.description.token)) or
              ($value.deprecation
               and $value.deprecation.notice
               and length($value.deprecation.notice.token))}
            <dd>
            {call .deprecationNotice}
              {param deprecation: $value.deprecation /}
            {/call}
            {call .comment}
              {param comment: $value.description /}
              {param omitLeadingTag: true /}
            {/call}
          {/if}
      {/foreach}
    </dl>
  </div>
{/template}


/**
 * Prints the type definitions for a descriptor.
 *
 * @param typeDefs A list of Dossier.JsType.TypeDef objects.
 */
{template .typedefs}
  {if length($typeDefs) > 0}
    <section>
      <h2>Type Definitions</h2>
      {foreach $typedef in $typeDefs}
        <div class="wrap-details">
            {switch $typedef.visibility}
              {case 'PUBLIC'}<div class="public">
              {case 'PROTECTED'}<div class="protected">
              {case 'PRIVATE'}<div class="private">
            {/switch}
            <details>
              <summary>
                <div>
                  <a class="source" href="{$typedef.href}">code &raquo;</a>
                  <a class="member{if $typedef.deprecation} deprecation-notice{/if}"
                     name="{$typedef.name}">{$typedef.name}</a> :{sp}
                  <code class="type">{$typedef.typeHtml |noAutoescape}</code>
                  {call .deprecationNotice}
                    {param deprecation: $typedef.deprecation /}
                  {/call}
                </div>
                <div>
                  {if $typedef.description and length($typedef.description.token)}
                    {call .comment}
                      {param comment: $typedef.description /}
                      {param omitLeadingTag: true /}
                    {/call}
                  {else}
                    No description.
                  {/if}
                </div>
              </summary>
            </details>
          </div>
        </div>
      {/foreach}
    </section>
  {/if}
{/template}


/**
 * Prints the summaries for the types nested within this type (e.g. classes,
 * enums, and interfaces).
 *
 * @param title The section title.
 * @param types A list of Dossier.JsType.NestedTypes.TypeSummary objects.
 */
{template .nestedTypeSummaries}
  {if length($types) > 0}
    <section>
      <h2>{$title}</h2>
      <div class="type-summary">
        <table><tbody><tr><td><dl>
          {foreach $type in $types}
            <dt><a href="{$type.href}">{$type.name}</a>
            <dd>
              {if $type.summary}
                {$type.summary}
              {else}
                No Description.
              {/if}
          {/foreach}
        </dl></table>
      </div>
    </section>
  {/if}
{/template}


/**
 * Generates the table rows for describing a function's return value.
 *
 * @param details A Dossier.Function.Detail object.
 */
{template .returnDetails}
  {if $details and $details.description and length($details.description.token)}
    <tr><th>Returns
    <tr><td><dl>
      {call .comment}
        {param comment: $details.description /}
        {param omitLeadingTag: true /}
      {/call}
    </dl>
  {/if}
{/template}


/**
 * Generates the table rows that describe some typed details about a function,
 * such as the named parameters or the conditions under which the function will
 * throw.
 *
 * @param header A string detail header.
 * @param details A list of Dossier.Function.Detail objects.
 */
{template .typeDetails}
  {if $details and length($details) > 0}
    <tr><th>{$header}
    <tr><td><dl>
      {foreach $detail in $details}
        <dt>
        {if $detail.name}{$detail.name}{/if}
        {if $detail.typeHtml}
          {if $detail.name}:{sp}{/if}
          <code class="type">{$detail.typeHtml |noAutoescape}</code>
        {/if}
        {if $detail.description and length($detail.description.token)}
          <dd>
            {call .comment}
              {param comment: $detail.description /}
              {param omitLeadingTag: true /}
            {/call}
        {/if}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Generates a table with details about a single function, such as its
 * arguments, thrown types, deprecation notice, and return type.
 *
 * @param fn A Dossier.Function object.
 */
{template .fnDetails}
  // Only generate the table if there is data to actually display.
  {if length($fn.parameter)
      or length($fn.thrown)
      or ($fn.return
          and $fn.return.description
          and length($fn.return.description.token)
          and not $fn.isConstructor)}
    <div class="info">
      <table><tbody>
        {call .typeDetails}
          {param header: 'Parameters' /}
          {param details: $fn.parameter /}
        {/call}
        {if not $fn.isConstructor}
          {call .returnDetails}
            {param details: $fn.return /}
          {/call}
        {/if}
        {call .typeDetails}
          {param header: 'Throws' /}
          {param details: $fn.thrown /}
        {/call}
      </table>
    </div>
  {/if}
{/template}


/**
 * Prints a list of template type names: {@literal <A, B, C>}.
 *
 * @param names The list of template type names.
 */
{template .printTemplateNames}
  <code class="type">&lt;
  {foreach $name in $names}
    {$name}
    {if not isLast($name)},{sp}{/if}
  {/foreach}
  &gt;</code>
{/template}


/**
 * Generates the HTML for a member signature (function or property).
 *
 * @param member Either a Dossier.Function or Dossier.Property object.
 * @param? parentName Name of the namespace/enum/class/interface that defines
 *     this member.
 */
{template .memberSignature}
  {if not $member.isConstructor and
      $member.templateName and length($member.templateName)}
    {call .printTemplateNames}
      {param names: $member.templateName /}
    {/call}
    {sp}
  {/if}

  {let $name: $parentName ? $parentName + '.' + $member.base.name
                          : $member.base.name /}

  <span class="member{if $member.base.deprecation} deprecation-notice{/if}">
    {if not $member.isConstructor}
      <a name="{$name}">{$name}</a>
    {else}
      {$name}
    {/if}
    {if $member.parameter}  // if is a function.
      {sp}<span class="args">(
        {foreach $parameter in $member.parameter}
          {$parameter.name}
          {if not isLast($parameter)},{sp}{/if}
        {/foreach}
      )</span>
      {if not $member.isConstructor
          and $member.return
          and $member.return.typeHtml
          and $member.return.typeHtml != 'undefined'
          and $member.return.typeHtml != '?'}
        {sp}&rArr; <code class="type">
          {$member.return.typeHtml |noAutoescape}
        </code>
      {/if}
    {elseif $member.typeHtml}  // property type known.
      {sp}: <code class="type">{$member.typeHtml |noAutoescape}</code>
    {/if}
  </span>
{/template}

/**
 * Generates the HTML for a class constructor.
 *
 * @param fn A Dossier.Function object.
 */
{template .ctor}
  <h2>Constructor</h2>
  <div class="wrap-details">
    {switch $fn.base.visibility}
      {case 'PUBLIC'}<div class="public ctor">
      {case 'PROTECTED'}<div class="protected ctor">
      {case 'PRIVATE'}<div class="private ctor">
    {/switch}
      <div>
        {call .memberSignature}
          {param member: $fn /}
        {/call}
      </div>
      {call .fnDetails}
        {param fn: $fn /}
      {/call}
    </div>
  </div>
{/template}


/**
 * Generates the HTML for documenting an object property.
 *
 * @param prop A Dossier.Property or Dossier.Function object.
 * @param? parentName Name of the namespace/enum/class/interface that owns
 *     this property.
 */
{template .printProperty}
  {let $isFunction: isNonnull($prop.parameter) /}

  <div class="wrap-details">
    {switch $prop.base.visibility}
      {case 'PUBLIC'}<div class="public">
      {case 'PROTECTED'}<div class="protected">
      {case 'PRIVATE'}<div class="private">
    {/switch}
      <details{if $isFunction} class="function"{/if}>
        <summary>
          <div>
            {call .sourceLink}
              {param href: $prop.base.source /}
            {/call}
            {call .memberSignature}
              {param member: $prop /}
              {param parentName: $parentName /}
            {/call}
          </div>
          {call .deprecationNotice}
            {param deprecation: $prop.base.deprecation /}
          {/call}
          {call .comment}
            {param comment: $prop.base.description /}
          {/call}
        </summary>
        {if $isFunction}
          {call .fnDetails}
            {param fn: $prop /}
          {/call}
        {/if}
      </details>
    </div>
  </div>
{/template}


/**
 * Print a list of properties or functions.
 *
 * @param properties A list of Dossier.Property or Dossier.Function objects.
 * @param? parentName Name of the namespace/enum/class/interface that owns
 *     this property.
 */
{template .printProperties}
  {foreach $property in $properties}
    {call .printProperty}
      {param prop: $property /}
      {param parentName: $parentName /}
    {/call}
  {/foreach}
{/template}


/**
 * Renders documentation for properties defined on the given type's
 * prototype chain.
 *
 * @param type A Dossier.JsType object.
 */
{template .prototype}
  {if $type.hasInstanceMethods}
    <section>
      <h2>Instance Methods</h2>
      {foreach $proto in $type.prototype}
        {if length($proto.function)}
          {if not (isFirst($proto) and isLast($proto))}
            <h3>Defined in <code class="type">
              {if $proto.href}
                <a href="{$proto.href}">{$proto.name}</a>
              {else}
                {$proto.name}
              {/if}
            </code></h3>
          {/if}
          {call .printProperties}
            {param properties: $proto.function /}
          {/call}
        {/if}
      {/foreach}
    </section>
  {/if}

  {if $type.hasInstanceProperties}
    <section>
      <h2>Instance Properties</h2>
      {foreach $proto in $type.prototype}
        {if length($proto.property)}
          {if not (isFirst($proto) and isLast($proto))}
            <h3>Defined in <code class="type">
              {if $proto.href}
                <a href="{$proto.href}">{$proto.name}</a>
              {else}
                {$proto.name}
              {/if}
            </code></h3>
          {/if}
          {call .printProperties}
            {param properties: $proto.property /}
          {/call}
        {/if}
      {/foreach}
    </section>
  {/if}
{/template}


/**
 * Prints the static property information for the given descriptor.
 *
 * @param type A Dossier.JsType object.
 */
{template .static}
  {if length($type.staticFunction)}
    <section>
      <h2>
        {if $type.constructor}
          Static Functions
        {else}
          Global Functions
        {/if}
      </h2>
      {call .printProperties}
        {param properties: $type.staticFunction /}
          {param parentName: $type.name /}
      {/call}
    </section>
  {/if}

  {if length($type.staticProperty)}
    <section>
      <h2>
        {if $type.constructor}
          Static Properties
        {else}
          Global Properties
        {/if}
      </h2>
      {call .printProperties}
        {param properties: $type.staticProperty /}
          {param parentName: $type.name /}
      {/call}
    </section>
  {/if}

  {if length($type.compilerConstant)}
    <section>
      <h2>Compiler Constants</h2>
      {call .printProperties}
        {param properties: $type.compilerConstant /}
          {param parentName: $type.name /}
      {/call}
    </section>
  {/if}
{/template}


/**
 * Generates an HTML page for displaying the documentation about a single
 * JavaScript type or namespace.
 *
 * @param spec A Dossier.JsTypeRenderSpec object.
 */
{template .typefile}
  {call .pageHeader}
    {param title: $spec.type.name /}
    {param resources: $spec.resources /}
  {/call}

  <div id="main-wrapper">
    {call .sideNavToggle /}
    <main>
      {call .typeHeader}
        {param type: $spec.type /}
      {/call}
      <section>
        {call .comment}
          {param comment: $spec.type.description /}
        {/call}
        {if $spec.type.constructor and not $spec.type.isInterface}
          {call .ctor}
            {param fn: $spec.type.constructor /}
          {/call}
        {/if}
        {if $spec.type.enumeration}
          {call .enumValues}
            {param name: $spec.type.name /}
            {param enumeration: $spec.type.enumeration /}
          {/call}
        {/if}
      </section>

      {call .nestedTypeSummaries}
        {param title: 'Interfaces' /}
        {param types: $spec.type.nested.interfaces /}
      {/call}
      {call .nestedTypeSummaries}
        {param title: 'Classes' /}
        {param types: $spec.type.nested.classes /}
      {/call}
      {call .nestedTypeSummaries}
        {param title: 'Enumerations' /}
        {param types: $spec.type.nested.enums /}
      {/call}

      {call .typedefs}
        {param typeDefs: $spec.type.typeDef /}
      {/call}

      {call .prototype}
        {param type: $spec.type /}
      {/call}
      {call .static}
        {param type: $spec.type /}
      {/call}
    </main>

    {call .topNav /}
    {call .sideNav}
      {param hasLicense: $spec.hasLicense /}
    {/call}
    <div id="push-footer"></div>
  </div>

  {call .footer}
    {param scripts: $spec.resources.script /}
  {/call}
{/template}


/**
 * Generates the main index.
 *
 * @param spec A Dossier.IndexFileRenderSpec object.
 */
{template .indexFile}
  {call .pageHeader}
    /* TODO(jleyba): title should be configurable. */
    {param title: 'Index' /}
    {param resources: $spec.resources /}
  {/call}

  <div id="main-wrapper">
    <main>
      {if $spec.readme and length($spec.readme.token)}
        {call .comment}
          {param comment: $spec.readme /}
        {/call}
      {else}
        <section id="type-index">
          <h2>Namespaces / Types</h2>
          <i>No data</i>
        </section>

        <section id="file-index">
          <h2>Files</h2>
          <i>No data</i>
        </section>
      {/if}
    </main>

    {call .topNav /}
    {call .sideNav}
      {param hasLicense: $spec.hasLicense /}
    {/call}
    <div id="push-footer"></div>
  </div>

  {call .footer}
    {param scripts: $spec.resources.script /}
  {/call}
{/template}


/**
 * Renders as license file as HTML.
 *
 * @param spec A Dossier.LicenseRenderSpec object.
 */
{template .licenseFile}
  {call .pageHeader}
    {param title: 'License' /}
    {param resources: $spec.resources /}
  {/call}

  <div id="main-wrapper">
    {call .sideNavToggle /}
    <main>
      <header><h1>License</h1></header>
      <pre>
        <table class="licensefile">
          <tbody><tr><td>{$spec.license.text |noAutoescape}
        </table>
      </pre>
    </main>

    {call .topNav /}
    {call .sideNav}
      {param hasLicense: true /}
    {/call}
    <div id="push-footer"></div>
  </div>

  {call .footer}
    {param scripts: $spec.resources.script /}
  {/call}
{/template}


/**
 * Generates an HTML page for displaying the contents of a JavaScript source
 * file.
 *
 * @param spec A Dossier.SourceFileRenderSpec object.
 */
{template .srcfile}
  {call .pageHeader}
    {param title: $spec.file.baseName /}
    {param resources: $spec.resources /}
  {/call}

  <div id="main-wrapper">
    {call .sideNavToggle /}
    <main>
      <header><h1>{$spec.file.path}</h1></header>
      <pre><table class="srcfile"><tbody>
      {let $count: 1 /}
      {foreach $line in $spec.file.lines}
        <tr>
        <td><a name="l{$count}" href="#l{$count}">{$count}</a>
        <td>{$line}
        {let $count: $count + 1 /}
      {/foreach}
      </table></pre>
    </main>

    {call .topNav /}
    {call .sideNav}
      {param hasLicense: $spec.hasLicense /}
    {/call}
    <div id="push-footer"></div>
  </div>

  {call .footer}
    {param scripts: $spec.resources.script /}
  {/call}
{/template}