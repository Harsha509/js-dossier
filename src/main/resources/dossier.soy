{namespace dossier}

/**
 * The main page header; responsible for setting the doctype, title, and
 * linking in any necessary stylesheets.
 *
 * @param title The page title.
 * @param styleSheets The stylesheets to include.
 */
{template .pageHeader}
  <!DOCTYPE html>
  <meta charset="UTF-8">
  <title>{$title}</title>
  // In Chrome, if the root element's font-size is changed in an external
  // stylesheet, it will not be applied before the body element's styles.
  // We can work around this by embedding the root font-size before linking
  // to our stylesheet.
  // See http://crbug.com/296380
  <style>html {lb} font-size: 10px; {rb}</style>
  {foreach $styleSheet in $styleSheets}
    <link href="{$styleSheet}" rel="stylesheet" type="text/css">
  {/foreach}
{/template}


/**
 * Displays the navigation bar displayed at the top of each page.
 */
{template .topNav}
  <nav id="topnav">
    <div>
      <div id="menubutton"><label for="sidenav-toggle">Menu</label></div>
      <div id="searchbox"><input type="search" placeholder="Search"></div>
    </div>
  </nav>
{/template}


/**
 * Generates the checkbox that toggles visibility of the side navigation pane.
 */
{template .sideNavToggle}
  <input type="checkbox" id="sidenav-toggle" />
{/template}


/**
 * Generates the place holder for the side navigation pane.
 *
 * @param index The index.
 */
{template .sideNav}
  <nav id="sidenav">
    <ul>
      <li>Home
      <li>Type Index
      {foreach $type in $index.types}
        <li><a href="{$type.href}">
        {if $type.isInterface}
          <i>{$type.name}</i>
        {else}
          {$type.name}
        {/if}
        </a>
      {/foreach}
      <li>File Index
      {foreach $file in $index.files}
        <li><a href="{$file.href}">{$file.name}</a>
      {/foreach}
    </ul>
  </nav>
{/template}


/**
 * Generates the page footer.
 *
 * @param scripts List of script files to include after the FOOTER element.
 * @param? footerClass Optional class name for the generated footer element.
 */
{template .footer}
  <footer {if $footerClass} class="{$footerClass}"{/if}>
    <div>Generated by <a href="https://github.com/jleyba/js-dossier">dossier</a></div>
  </footer>
  {foreach $script in $scripts}
    <script src="{$script}"></script>
  {/foreach}
{/template}


/**
 * Prints the hyperlink to a source file. This template will not print anything
 * if the source file's href is unknown.
 *
 * @param? href The link location.
 */
{template .sourceLink}
  {if $href}
    <a class="source" href="{$href}">code &raquo;</a>
  {/if}
{/template}


/**
 * Prints a graphical representation of a class's type inheritance:
 * goog.Foo
 *   - goog.Bar
 *       - goog.Bim
 *           - goog.Baz
 *
 * This template is a no-op if given a non-class descriptor.
 *
 * @param descriptor The class descriptor.
 */
{template .classInheritance}
  {if $descriptor.isClass and length($descriptor.inheritedTypes) >= 2}
    <pre><code>
    {foreach $type in $descriptor.inheritedTypes}
      {if isFirst($type)}
        {$type |noAutoescape}
      {else}
        {\n}{print '  '}
        {if index($type) > 1}
          {for $i in range(index($type) - 1)}{print '    '}{/for}
        {/if}
        &#x2514; {$type |noAutoescape}
      {/if}
    {/foreach}
    </code></pre>
  {/if}
{/template}


/**
 * Prints information about the interfaces the given descriptor implements or
 * extends (if itself an interface).
 *
 * @param descriptor The descriptor.
 */
{template .printInterfaces}
  // Note: if desciptor is itself an interface, it will not be included in the
  // interfaces property.
  {if length($descriptor.interfaces)}
    <dl>
      <dt>
      {if $descriptor.isInterface}
        All extended interfaces:
      {else}
        All implemented interfaces:
      {/if}
      <dd>
      {foreach $interface in $descriptor.interfaces}
        {$interface |noAutoescape}
        {if not isLast($interface)},{sp}{/if}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Prints a notification that a descriptor is deprecated.
 *
 * @param descriptor The descriptor to print a deprecation notice for.
 */
{template .deprecationNotice}
  {if $descriptor.isDeprecated and $descriptor.deprecationHtml}
    <div class="deprecation-notice">Deprecated:{sp}
      <span class="deprecation-reason">
        {$descriptor.deprecationHtml |noAutoescape}
      </span>
    </div>
  {/if}
{/template}


/**
 * Generates the header for the main section of a type file.
 *
 * @param descriptor The descriptor.
 */
{template .typeHeader}
  <header>
    <h1>
      {if $descriptor.isClass}
        class {$descriptor.name}
      {elseif $descriptor.isInterface}
        interface {$descriptor.name}
      {elseif $descriptor.isEnum}
        enum {$descriptor.name}
      {else}
        namespace {$descriptor.name}
      {/if}
      {if $descriptor.isDeprecated}
        <span class="deprecation-notice"> (deprecated)</span>
      {/if}
    </h1>

    {call .sourceLink}
      {param href: $descriptor.sourceLink /}
    {/call}

    {if $descriptor.isEnum and $descriptor.enumType}
      <dl><dt>Type: <code class="type">{$descriptor.enumType |noAutoescape}</code></dl>
    {/if}

    {call .classInheritance}{param descriptor: $descriptor /}{/call}
    {call .printInterfaces}{param descriptor: $descriptor /}{/call}
    {call .deprecationNotice}{param descriptor: $descriptor /}{/call}
  </header>
{/template}


/**
 * Prints the enum values for the given constructor.
 *
 * @param descriptor The enum descriptor.
 */
{template .enumValues}
  <h2>Values and Descriptions</h2>
  <div class="type-summary">
    <table><tbody>
      <tr><td><dl>
      {foreach $value in $descriptor.enumValues}
        <dt>
          {if $value.isDeprecated}
            <a class="enum member deprecation-notice" name="{$value.fullName}">
          {else}
            <a class="enum member" name="{$value.fullName}">
          {/if}
          {$value.name}</a>
          {if $value.descriptionHtml or ($value.isDeprecated and $value.deprecationHtml)}
            <dd>
            {call .deprecationNotice}
              {param descriptor: $value /}
            {/call}
            {$value.descriptionHtml |noAutoescape}
          {/if}
      {/foreach}
      </dl>
    </table>
  </div>
{/template}


/**
 * Prints the type definitions for a descriptor.
 *
 * @param descriptor The descriptor.
 */
{template .typedefs}
  {if length($descriptor.typedefs) > 0}
    <section>
      <h2>Type Definitions</h2>
      {foreach $typedef in $descriptor.typedefs}
        <details>
          <summary>
            <div>
              <a class="source" href="{$typedef.href}">code &raquo;</a>
              {if $typedef.isDeprecated}
                <a class="member deprecation-notice" name="{$typedef.name}">
              {else}
                <a class="member" name="{$typedef.name}">
              {/if}
              {$typedef.name}</a> :{sp}
              <code class="type">{$typedef.typeHtml |noAutoescape}</code>
              {call .deprecationNotice}
                {param descriptor: $typedef /}
              {/call}
            </div>
            {if $typedef.descriptionHtml}
              <div>{$typedef.descriptionHtml}</div>
            {/if}
          </summary>
        </details>
      {/foreach}
    </section>
  {/if}
{/template}


/**
 * Prints the summaries for the types nested within this type (e.g. classes,
 * enums, and interfaces).
 *
 * @param title The section title.
 * @param types List of nested types.
 */
{template .nestedTypeSummaries}
  {if length($types) > 0}
    <section>
      <h2>{$title}</h2>
      <div class="type-summary">
        <table><tbody><tr><td><dl>
          {foreach $type in $types}
            <dt><a href="{$type.href}">{$type.name}</a>
            {if $type.summaryHtml}
              <dd>{$type.summaryHtml}
            {/if}
          {/foreach}
        </dl></table>
      </div>
    </section>
  {/if}
{/template}


/**
 * Generates the table rows for describing a function's return value.
 *
 * @param details A dossier.soy.FunctionDetail object.
 */
{template .returnDetails}
  {if $details and $details.descriptionHtml}
    <tr><th>Returns
    <tr><td><dl>{$details.descriptionHtml |noAutoescape}</dl>
  {/if}
{/template}


/**
 * Generates the table rows that describe some typed details about a function,
 * such as the named parameters or the conditions under which the function will
 * throw.
 *
 * @param header A string detail header.
 * @param details A list of dossier.soy.FunctionDetail objects.
 */
{template .typeDetails}
  {if length($details) > 0}
    <tr><th>{$header}
    <tr><td><dl>
      {foreach $detail in $details}
        <dt>
        {if $detail.name}{$detail.name}{/if}
        {if $detail.typeHtml}
          {if $detail.name}:{sp}{/if}
          <code class="type">{$detail.typeHtml |noAutoescape}</code>
        {/if}
        {if $detail.descriptionHtml}
          <dd>{$detail.descriptionHtml |noAutoescape}
        {/if}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Generates a table with details about a single function, such as its
 * arguments, thrown types, deprecation notice, and return type.
 *
 * @param fn A dossier.soy.FunctionInfo object.
 */
{template .fnDetails}
  // Only generate the table if there is data to actually display.
  {if length($fn.args) > 0
      or length($fn.throws) > 0
      or ($fn.returns and $fn.returns.descriptionHtml)}
    <div class="info">
      <table><tbody>
        {call .typeDetails}
          {param header: 'Parameters' /}
          {param details: $fn.args /}
        {/call}
        {call .returnDetails}
          {param details: $fn.returns /}
        {/call}
        {call .typeDetails}
          {param header: 'Throws' /}
          {param details: $fn.throws /}
        {/call}
      </table>
    </div>
  {/if}
{/template}


/**
 * Generates the HTML for a member signature (function or property).
 * @param member The member descriptor.
 */
{template .memberSignature}
  {if $member.templateNames and length($member.templateNames)}
    <code class="type">&lt;
    {foreach $name in $member.templateNames}
      {$name}
      {if not isLast($name)},{sp}{/if}
    {/foreach}
    &gt;{sp}</code>
  {/if}

  {let $frag: $member.frag ? 'name="' + $member.frag + '"' : '' /}
  {if $member.isDeprecated}
    <span class="member deprecation-notice" {$frag}>
  {else}
    <span class="member" {$frag}>
  {/if}
  {if strContains($member.fullName, '.prototype.')}
    {$member.name}
  {else}
    {$member.fullName}
  {/if}
  {if isNonnull($member.args)}  // if is a function.
    {sp}<span class="args">(
      {foreach $arg in $member.args}
        {$arg.name}
        {if not isLast($arg)},{sp}{/if}
      {/foreach}
      )</span>
    {if $member.returns
        and $member.returns.typeHtml
        and $member.returns.typeHtml != 'undefined'
        and $member.returns.typeHtml != '?'}
      {sp}&rArr; <code class="type">
        {$member.returns.typeHtml |noAutoescape}
      </code>
    {/if}
  {elseif $member.typeHtml}
    {sp}: <code class="type">{$member.typeHtml |noAutoescape}</code>
  {/if}
{/template}

/**
 * Generates the HTML for a class constructor.
 *
 * @param fn A dossier.soy.FunctionInfo object.
 */
{template .ctor}
  <h2>Constructor</h2>
  <div>
    {call .memberSignature}
      {param member: $fn /}
    {/call}
  </div>
  {call .fnDetails}
    {param fn: $fn /}
  {/call}
{/template}


/**
 * Generates the HTML for documenting an object property.
 *
 * @param prop A dossier.soy.FunctionInfo object.
 */
{template .printProperty}
  {let $isFunction: isNonnull($prop.args) /}

  {if $isFunction}<details class="function">{else}<details>{/if}
    <summary>
      <div>
        <a class="source" href="{$prop.href}">code &raquo;</a>
        {call .memberSignature}
          {param member: $prop /}
        {/call}
      </div>
      {call .deprecationNotice}
        {param descriptor: $prop /}
      {/call}
      {if $prop.descriptionHtml}
        <p>{$prop.descriptionHtml |noAutoescape}
      {/if}
    </summary>
    {if $isFunction}
      {call .fnDetails}
        {param fn: $prop /}
      {/call}
    {/if}
  </details>
{/template}



/**
 * Prints the prototype information for the given descriptor.
 *
 * @param descriptor The descriptor.
 */
{template .prototype}
  {if $descriptor.prototype.hasMethods}
    <section>
      <h2>Instance Methods</h2>
      {foreach $proto in $descriptor.prototype.chain}
        {if length($proto.methods) > 0}
          <h3>Defined in <code class="type">
            {if $proto.href}
              <a href="{$proto.href}">{$proto.name}</a>
            {else}
              {$proto.name}
            {/if}
          </code></h3>
          {foreach $method in $proto.methods}
            {call .printProperty}
              {param prop: $method /}
            {/call}
          {/foreach}
        {/if}
      {/foreach}
    </section>
  {/if}

  {if $descriptor.prototype.hasProperties}
    <section>
      <h2>Instance Properties</h2>
      {foreach $proto in $descriptor.prototype.chain}
        {if length($proto.properties) > 0}
          <h3>Defined in <code class="type">
            {if $proto.href}
              <a href="{$proto.href}">{$proto.name}</a>
            {else}
              {$proto.name}
            {/if}
          </code></h3>
          {foreach $prop in $proto.properties}
            {call .printProperty}
              {param prop: $prop /}
            {/call}
          {/foreach}
        {/if}
      {/foreach}
    </section>
  {/if}
{/template}


/**
 * Prints the static property information for the given descriptor.
 *
 * @param descriptor The descriptor.
 */
{template .static}
  {if length($descriptor.static.functions) > 0}
    <section>
      <h2>{print $descriptor.isClass ?
          'Static Functions' : 'Global Functions'}</h2>
      {foreach $fn in $descriptor.static.functions}
        {call .printProperty}
          {param prop: $fn /}
        {/call}
      {/foreach}
    </section>
  {/if}

  {if length($descriptor.static.properties) > 0}
    <section>
      <h2>{print $descriptor.isClass ?
          'Static Properties' : 'Global Properties'}</h2>
      {foreach $prop in $descriptor.static.properties}
        {call .printProperty}
          {param prop: $prop /}
        {/call}
      {/foreach}
    </section>
  {/if}
{/template}


/**
 * Generates an HTML page for displaying the documentation about a single
 * JavaScript type or namespace.
 *
 * @param styleSheets The stylesheets to include in the page.
 * @param descriptor The type descriptor. (TODO: more documentation here).
 * @param scripts The scripts to include in the page.
 * @param index The index for the side navigation pane.
 */
{template .typefile}
  {call .pageHeader}
    {param title: $descriptor.name /}
    {param styleSheets: $styleSheets /}
  {/call}

  <div class="wrapper">
    {call .sideNavToggle /}
    <main>
      {call .typeHeader}
        {param descriptor: $descriptor /}
      {/call}
      <section>
        {if $descriptor.descriptionHtml}
          <p>{$descriptor.descriptionHtml |noAutoescape}
        {/if}
        {if $descriptor.isClass}
          {call .ctor}
            {param fn: $descriptor.ctor /}
          {/call}
        {/if}
        {if $descriptor.isEnum}
          {call .enumValues}
            {param descriptor: $descriptor /}
          {/call}
        {/if}
      </section>

      {call .typedefs}
        {param descriptor: $descriptor /}
      {/call}
      {call .nestedTypeSummaries}
        {param title: 'Interfaces' /}
        {param types: $descriptor.nested.interfaces /}
      {/call}
      {call .nestedTypeSummaries}
        {param title: 'Classes' /}
        {param types: $descriptor.nested.classes /}
      {/call}
      {call .nestedTypeSummaries}
        {param title: 'Enumerations' /}
        {param types: $descriptor.nested.enums /}
      {/call}

      {call .prototype}
        {param descriptor: $descriptor /}
      {/call}
      {call .static}
        {param descriptor: $descriptor /}
      {/call}
    </main>

    {call .topNav /}
    {call .sideNav}
      {param index: $index /}
    {/call}

    {call .footer}
      {param scripts: $scripts /}
    {/call}
  </div>
{/template}


/**
 * Generates an HTML page for displaying the contents of a JavaScript source
 * file.
 *
 * @param title The page title.
 * @param styleSheets The stylesheets to include in the page.
 * @param displayPath The path to display for the displayed file.
 * @param lines The individual lines for the displayed file.
 * @param scripts The scripts to include in the page.
 * @param index The index for the side navigation pane.
 */
{template .srcfile}
  {call .pageHeader}
    {param title: $title /}
    {param styleSheets: $styleSheets /}
  {/call}

  {let $className: 'srcfile' /}

  <div class="wrapper">
    {call .sideNavToggle /}
    <main>
      <header><h1>{$displayPath}</h1></header>
      <pre><table class="{$className}"><tbody>
      {let $count: 1 /}
      {foreach $line in $lines}
        <tr>
        <td><a name="l{$count}" href="#l{$count}">{$count}</a>
        <td>{$line}
        {let $count: $count + 1 /}
      {/foreach}
      </table></pre>
    </main>

    {call .topNav /}
    {call .sideNav}
      {param index: $index /}
    {/call}

    {call .footer}
      {param scripts: $scripts /}
      {param footerClass: $className /}
    {/call}
  </div>
{/template}