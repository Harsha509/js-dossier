{namespace dossier.soy autoescape="deprecated-noncontextual"}

/**
 * The main page header; responsible for setting the doctype, title, and
 * linking in any necessary stylesheets.
 */
{template .pageHeader}
  {@param title: string}
  {@param resources: dossier.Resources}

  <!DOCTYPE html>
  <meta charset="UTF-8">
  <meta http-equiv="Content-Language" content="en" />
  <title>{$title}</title>
  {foreach $styleSheet in $resources.css}
    <link href="{$styleSheet}" rel="stylesheet" type="text/css">
  {/foreach}
  <header>
    <div>
      <form>
        <div>
          <input type="search" placeholder="Search">
        </div>
      </form>
    </div>
  </header>
{/template}


/**
 * Generates the nav list.
 */
{template .sideNav}
  {@param index: dossier.Index}

  <nav>
    <h3><a href="{$index.home}">Overview</a></h3>
    {if length($index.module)}
      <div>
        <input type="checkbox" id="nav-modules" checked/>
        <label for="nav-modules"><h3>Modules</h3></label>
        <div>
          <ul>
            {foreach $module in $index.module}
              <li><a href="{$module.link.href}">{$module.link.text}</a>
                {if length($module.type)}
                  <ul>
                    {foreach $link in $module.type}
                      <li><a href="{$link.href}">{$link.text}</a>
                    {/foreach}
                  </ul>
                {/if}
            {/foreach}
          </ul>
        </div>
      </div>
    {/if}
    {if length($index.type)}
      <div>
        <input type="checkbox" id="nav-types" checked/>
        <label for="nav-types"><h3>Types</h3></label>
        <div>
          <ul>
            {foreach $link in $index.type}
              <li><a href="{$link.href}">{$link.text}</a>
            {/foreach}
          </ul>
        </div>
      </div>
    {/if}
  </nav>
{/template}


/**
 * Generates the page footer.
 */
{template .footer private="true"}
  {@param resources: dossier.Resources}

  /* used for vertical fill from main. */
  <div class="pre-footer"><div></div></div>

  <footer>
    <a href="https://github.com/jleyba/js-dossier">Generated by dossier</a>
  </footer>
  {foreach $script in $resources.script}
    <script src="{$script}"></script>
  {/foreach}
{/template}


/**
 * Renders a block comment.
 */
{template .comment}
  {@param comment: dossier.Comment}
  {@param? omitLeadingTag: bool}  /* Whether to omit the leading P tag. */

  {if $comment and length($comment.token)}
    {if not $omitLeadingTag}<p>{/if}
    {foreach $token in $comment.token}
      {if $token.isCode}<code>{/if}
      {if $token.href}
        <a href="{$token.href}">
      {elseif $token.unresolvedLink}
        <a class="unresolved-link">
      {/if}
      {if $token.isCode or $token.isLiteral}
        {$token.text}
      {else}
        {$token.text |noAutoescape}
      {/if}
      {if $token.unresolvedLink or $token.href}</a>{/if}
      {if $token.isCode}</code>{/if}
    {/foreach}
  {/if}
{/template}


/**
 * Prints the hyperlink to a source file. This template will not print anything
 * if the source file's href is unknown.
 */
{template .sourceLink private="true"}
  {@param? href: string}
  {@param? span: bool} /* Whether to use span instead of div */
  {if $href}
    <{if $span}span{else}div{/if} class="codelink">
      <a href="{$href}">code &raquo;</a>
    </{if $span}span{else}div{/if}>
  {/if}
{/template}


/**
 * Prints a graphical representation of a class's type inheritance:
 * goog.Foo
 *   - goog.Bar
 *       - goog.Bim
 *           - goog.Baz
 *
 * This template is a no-op if given a non-class descriptor.
 */
{template .classInheritance}
  {@param types: list<dossier.TypeLink>}

  {if length($types) >= 2}
    <pre class="inheritance">
      {foreach $type in $types}
        {if not isFirst($type)}
          {\n}{print '  '}
          {if index($type) > 1}
            {for $i in range(index($type) - 1)}{print '    '}{/for}
          {/if}
          &#x2514;{sp}
        {/if}
        {if isLast($type) or not $type.href}
          {$type.text}
        {else}
          <a href="{$type.href}">{$type.text}</a>
        {/if}
      {/foreach}
    </pre>
  {/if}
{/template}


/**
 * Prints information about the interfaces the given descriptor implements or
 * extends (if itself an interface).
 */
{template .printInterfaces private="true"}
  {@param type: dossier.JsType}

  // Note: if type is itself an interface, it will not be included in the
  // |implemented_type| list.
  {if length($type.implementedType)}
    <dt>
      All {if $type.tags.isInterface}extended{else}implemented{/if} interfaces:
    <dd>
      {foreach $interface in $type.implementedType}
        <code>
          {if $interface.href}
            <a href="{$interface.href}">{$interface.text}</a>
          {else}
            {$interface.text}
          {/if}
        </code>
        {if not isLast($interface)},{sp}{/if}
      {/foreach}
  {/if}
{/template}


/**
 * Prints a link to another descriptor that the given type is an alias
 * for.
 */
{template .printAliasLink private="true"}
  {@param type: dossier.JsType}

  {if $type.aliasedType}
    <dt>Alias for{sp}
      <code>
        {if $type.aliasedType.href}
          <a href="{$type.aliasedType.href}">{$type.aliasedType.text}</a>
        {else}
          {$type.aliasedType.text}
        {/if}
      </code>
  {/if}
{/template}


/**
 * Prints a notification that a descriptor is deprecated.
 */
{template .deprecationNotice private="true"}
  {@param deprecation: dossier.Deprecation}
  {@param? omitLeadingTag: bool}

  {if $deprecation and $deprecation.notice and length($deprecation.notice.token)}
    {if not $omitLeadingTag}<p>{/if}
      <b>Deprecated: </b>
      {call .comment}
        {param comment: $deprecation.notice /}
        {param omitLeadingTag: true /}
      {/call}
    {if not $omitLeadingTag}</p>{/if}
  {/if}
{/template}


/**
 * Prints the values for the given enumeration.
 */
{template .enumValues private="true"}
  {@param name: string}
  {@param enumeration: dossier.Enumeration}

  {if length($enumeration.value)}
    <h2>Values and Descriptions</h2>
    <dl>
      {foreach $value in $enumeration.value}
        <dt{if $value.deprecation.notice and length($value.deprecation.notice.token)} class="deprecated"{/if}>
          <a id="{$name + '.' + $value.name}"></a>
          /* TODO: deprecation */
          {$value.name}
        {if ($value.description and length($value.description.token)) or
            ($value.deprecation
             and $value.deprecation.notice
             and length($value.deprecation.notice.token))}
          <dd>
            {call .comment}
              {param comment: $value.description /}
              {param omitLeadingTag: true /}
            {/call}
            {if $value.deprecation.notice and length($value.deprecation.notice.token)}
              <br>
              {call .deprecationNotice}
                {param deprecation: $value.deprecation /}
                {param omitLeadingTag: true /}
              {/call}
            {/if}
        {/if}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Prints the summaries for the types nested within this type (e.g. classes,
 * enums, and interfaces).
 *
 * @param title The section title.
 * @param types A list of Dossier.JsType.NestedTypes.TypeSummary objects.
 */
{template .nestedTypeSummaries}
  {if length($types) > 0}
    <section>
      <h2>{$title}</h2>
      <div class="type-summary">
        <table><tbody><tr><td><dl>
          {foreach $type in $types}
            <dt><a href="{$type.href}">{$type.name}</a>
            <dd>
              {if $type.summary and length($type.summary.token)}
                {call .comment}
                  {param comment: $type.summary /}
                  {param omitLeadingTag: true /}
                {/call}
              {else}
                No Description.
              {/if}
          {/foreach}
        </dl></table>
      </div>
    </section>
  {/if}
{/template}


/**
 * Generates the table rows for describing a function's return value. Will
 * only generate content if there is a return description, or a non-vacuous
 * return type expression (i.e. nothing will be generated if the only
 * return detail is the type is "*", "undefined", etc.)
 */
{template .returnDetails}
  {@param details: dossier.Function.Detail}

  {let $nonVacuousReturn: ($details.typeHtml
                           and $details.typeHtml != 'undefined'
                           and $details.typeHtml != '?'
                           and $details.typeHtml != 'void'
                           and $details.typeHtml != '*') /}

  {if $details
      and (($details.description and length($details.description.token))
      or $nonVacuousReturn)}
    <tr><th>Returns</th>
    <tr><td>
      {if $nonVacuousReturn}
        <dl>
          <dt><code>{$details.typeHtml |noAutoescape}</code>
          {if $details.description and length($details.description.token)}
            <dd>
              {call .comment}
                {param comment: $details.description /}
                {param omitLeadingTag: true /}
              {/call}
          {/if}
        </dl>
      {elseif $details.description and length($details.description.token)}
        {call .comment}
          {param comment: $details.description /}
        {/call}
      {/if}
  {/if}
{/template}


/**
 * Generates the table rows that describe some typed details about a function,
 * such as the named parameters or the conditions under which the function will
 * throw.
 *
 * @param header A string detail header.
 * @param details A list of Dossier.Function.Detail objects.
 */
{template .typeDetails}
  {if $details and length($details) > 0}
    <tr><th>{$header}
    <tr><td><dl>
      {foreach $detail in $details}
        <dt>
        {if $detail.name}{$detail.name}{/if}
        {if $detail.typeHtml}
          <code>{$detail.typeHtml |noAutoescape}</code>
        {/if}
        {if $detail.description and length($detail.description.token)}
          <dd>
            {call .comment}
              {param comment: $detail.description /}
              {param omitLeadingTag: true /}
            {/call}
        {/if}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Generates a table with details about a single function, such as its
 * arguments, thrown types, deprecation notice, and return type.
 *
 * @param fn A Dossier.Function object.
 */
{template .fnDetails}
  // Only generate the table if there is data to actually display.
  {if length($fn.parameter)
      or length($fn.thrown)
      or ($fn.return
          and $fn.return.description
          and length($fn.return.description.token)
          and not $fn.isConstructor)}
    <div>
      <table><tbody>
        {call .typeDetails}
          {param header: 'Parameters' /}
          {param details: $fn.parameter /}
        {/call}
        {if not $fn.isConstructor}
          {call .returnDetails}
            {param details: $fn.return /}
          {/call}
        {/if}
        {call .typeDetails}
          {param header: 'Throws' /}
          {param details: $fn.thrown /}
        {/call}
      </table>
    </div>
  {/if}
{/template}


/**
 * Prints a list of template type names: {@literal <A, B, C>}.
 *
 * @param names The list of template type names.
 */
{template .printTemplateNames}
  &lt;
  {foreach $name in $names}
    {$name}
    {if not isLast($name)},{sp}{/if}
  {/foreach}
  &gt;
{/template}


/** Renders a list of function arguments. */
{template .functionArgs}
  {@param fn: dossier.Function}
  (
  {foreach $parameter in $fn.parameter}
    {$parameter.name}
    {if not isLast($parameter)},{sp}{/if}
  {/foreach}
  )
{/template}


/**
 * Generates the HTML for a type descriptor's main function (which is either
 * a constructor or the primary function in a namespace/module which all other
 * properties are hung off of).
 */
{template .mainFunction}
  {@param type: dossier.JsType}

  <h2 class="main">
    {if $type.mainFunction.isConstructor}new{sp}{/if}
    {$type.name}
    {call .functionArgs}
      {param fn: $type.mainFunction /}
    {/call}
  </h2>
  {if length($type.mainFunction.parameter)
      or length($type.mainFunction.thrown)
      or ($type.mainFunction.return
          and $type.mainFunction.return.description
          and length($type.mainFunction.return.description.token)
          and not $type.mainFunction.isConstructor)}
    {call .fnDetails}
      {param fn: $type.mainFunction /}
    {/call}
  {else}
    <p>No information.</p>
  {/if}
{/template}


/**
 * Generates the HTML for documenting a function property.
 */
{template .printFunction}
  {@param  fn: dossier.Function}
  {@param? parentName: string}

  <h3>
    {if $fn.templateName and length($fn.templateName)}
      <code>
        {call .printTemplateNames}
          {param names: $fn.templateName /}
        {/call}
      </code>
      {sp}
    {/if}

    {let $name: $parentName ? ($parentName + '.' + $fn.base.name) : $fn.base.name /}

    /* TODO: deprecation $fn.base.deprecation */
    <a id="{$name}"></a>
    {$name}
    (
    {foreach $parameter in $fn.parameter}
      {$parameter.name}
      {if not isLast($parameter)},{sp}{/if}
    {/foreach}
    )
    {call .sourceLink}
      {param href: $fn.base.source /}
      {param span: true /}
    {/call}
  </h3>
  {call .tags}
    {param tags: $fn.base.tags /}
  {/call}

  {if ($fn.base.description and length($fn.base.description.token))
      or length($fn.parameter)
      or length($fn.thrown)
      or ($fn.return
          and $fn.return.description
          and length($fn.return.description.token))}
    {call .comment}
      {param comment: $fn.base.description /}
    {/call}
    {call .deprecationNotice}
      {param deprecation: $fn.base.deprecation /}
    {/call}
    {call .fnDetails}
      {param fn: $fn /}
    {/call}
  {elseif $fn.base.deprecation
      and $fn.base.deprecation.notice
      and length($fn.base.deprecation.notice.token)}
    {call .deprecationNotice}
      {param deprecation: $fn.base.deprecation /}
    {/call}
  {else}
    <p>No information.</p>
  {/if}
{/template}


/**
 * Generates the HTML for documenting an object property.
 */
{template .printProperty}
  {@param prop: dossier.Property}
  {@param? parentName: string}

  {let $name: $parentName ? $parentName + '.' + $prop.base.name
                          : $prop.base.name /}
  <dt>
    <a id="{$name}"></a>
    {if $prop.base.source}
      <a href="{$prop.base.source}">{$name}</a>
    {else}
      {$name}
    {/if}
    /* todo: deprecation */
    {if $prop.typeHtml}
      <code>{$prop.typeHtml |noAutoescape}</code>
    {/if}
  <dd>
    {if $prop.base.description and length($prop.base.description.token)}
      {call .comment}
        {param comment: $prop.base.description /}
        {param omitLeadingTag: true /}
      {/call}
    {else}
      No description.
    {/if}
{/template}


/**
 * Print a list of functions.
 */
{template .printFunctions}
  {@param functions: list<dossier.Function>}
  {@param? parentName: string}

  {foreach $fn in $functions}
    {call .printFunction}
      {param fn: $fn /}
      {param parentName: $parentName /}
    {/call}
  {/foreach}
{/template}

/**
 * Print a list of properties.
 */
{template .printProperties}
  {@param properties: list<dossier.Property>}
  {@param? parentName: string}

  {foreach $property in $properties}
    {call .printProperty}
      {param prop: $property /}
      {param parentName: $parentName /}
    {/call}
  {/foreach}
{/template}


/**
 * Renders documentation for properties defined on the given type's
 * prototype chain.
 */
{template .prototype}
  {@param type: dossier.JsType}

  {if $type.hasInstanceMethods}
    <h2>Instance Methods</h2>
    {foreach $proto in $type.prototype}
      {call .printFunctions}
        {param functions: $proto.function /}
      {/call}
    {/foreach}
  {/if}

  {if $type.hasInstanceProperties}
    <h2>Instance Properties</h2>
    <dl>
      {foreach $proto in $type.prototype}
        {foreach $property in $proto.property}
          {call .printProperty}
            {param prop: $property /}
          {/call}
        {/foreach}
      {/foreach}
    </dl>
  {/if}
{/template}


/**
 * Prints the static property information for the given descriptor.
 */
{template .static}
  {@param type: dossier.JsType}

  {let $parentName: $type.tags.isModule ? '' : $type.name /}

  {if length($type.staticFunction)}
    <h2>
      {if $type.mainFunction and $type.mainFunction.isConstructor}
        Static Functions
      {else}
        Functions
      {/if}
    </h2>
    {call .printFunctions}
      {param functions: $type.staticFunction /}
      {param parentName: $parentName /}
    {/call}
  {/if}

  {if length($type.staticProperty)}
    <h2>
      {if $type.mainFunction and $type.mainFunction.isConstructor}
        Static Properties
      {else}
        Properties
      {/if}
    </h2>
    <dl>
      {call .printProperties}
        {param properties: $type.staticProperty /}
        {param parentName: $parentName /}
      {/call}
    </dl>
  {/if}

  {if length($type.compilerConstant)}
    <h2>Compiler Constants</h2>
    <dl>
      {call .printProperties}
        {param properties: $type.compilerConstant /}
        {param parentName: $parentName /}
      {/call}
    </dl>
  {/if}
{/template}


/**
 * Generates the header for the main section of a type file.
 */
{template .typeHeader}
  {@param type: dossier.JsType}

  {if $type.module}
    <div class="parentlink">
      <b>Module:</b>{sp}
      {if $type.module.href}
        <a href="{$type.module.href}">{$type.module.text}</a>
      {else}
        {$type.module.text}
      {/if}
    </div>
  {/if}
  {if $type.source}
    <div class="codelink">
      <a href="{$type.source}">View Source</a>
    </div>
  {/if}
  <h1{if $type.deprecation} class="deprecated"{/if}>
    {if $type.tags.isModule}
      module {$type.name}
    {elseif $type.tags.isInterface}
      interface {$type.name}
    {elseif $type.mainFunction and $type.mainFunction.isConstructor}
      class {$type.name}
    {elseif $type.enumeration}
      enum {$type.name}
    {else}
      namespace {$type.name}
    {/if}
    {if $type.mainFunction and length($type.mainFunction.templateName)}
      {call .printTemplateNames}
        {param names: $type.mainFunction.templateName /}
      {/call}
    {/if}
  </h1>
  {call .tags}
    {param tags: $type.tags /}
  {/call}

  {if $type.enumeration and length($type.enumeration.type.token)}
    <dl>
      <dt>Type
        <code>
          {call .comment}
            {param comment: $type.enumeration.type /}
            {param omitLeadingTag: true /}
          {/call}
        </code>
    </dl>
  {/if}

  {call .classInheritance}
    {param types: $type.extendedType /}
  {/call}
  {if $type.aliasedType or length($type.implementedType)}
    <dl>
      {call .printAliasLink}
        {param type: $type /}
      {/call}
      {call .printInterfaces}
        {param type: $type /}
      {/call}
    </dl>
  {/if}
  {call .deprecationNotice}
    {param deprecation: $type.deprecation /}
  {/call}
{/template}


/**
 * Renders a list of tags.
 */
{template .tags private="true"}
  {@param tags: dossier.Tags}
  {@param? span: bool}
  {if $tags.isDeprecated
      or $tags.isConst
      or $tags.isFinal
      or $tags.isDict
      or $tags.isStruct}
    <{if $span}span{else}div{/if} class="tags">
      {if $tags.isDeprecated}<span>deprecated</span>{/if}
      {if $tags.isConst}<span>const</span>{/if}
      {if $tags.isFinal}<span>final</span>{/if}
      {if $tags.isDict}<span>dict</span>{/if}
      {if $tags.isStruct}<span>struct</span>{/if}
    </{if $span}span{else}div{/if}>
  {/if}
{/template}


/**
 * Generates an HTML page for displaying the documentation about a single
 * JavaScript type or namespace.
 */
{template .typefile}
  {@param spec: dossier.JsTypeRenderSpec}

  {call .pageHeader}
    {param title: $spec.type.name /}
    {param resources: $spec.resources /}
  {/call}

  <main>
    <article>
      {call .typeHeader}
        {param type: $spec.type /}
      {/call}
      {call .comment}
        {param comment: $spec.type.description /}
      {/call}
      {if not $spec.type.tags.isInterface and $spec.type.mainFunction}
        {call .mainFunction}
          {param type: $spec.type /}
        {/call}
      {/if}
      {if $spec.type.enumeration}
        {call .enumValues}
          {param name: $spec.type.name /}
          {param enumeration: $spec.type.enumeration /}
        {/call}
      {/if}

      {call .prototype}
        {param type: $spec.type /}
      {/call}

      {call .static}
        {param type: $spec.type /}
      {/call}

      /* TODO: merged nested types into a flat list, not sorted by category */
      {if length($spec.type.nested) > 0}
        <h2>Types</h2>
        <dl>
          {foreach $type in $spec.type.nested}
            <dt><a href="{$type.href}">{$type.name}</a>
            <dd>
              {if $type.summary and length($type.summary.token)}
                {call .comment}
                  {param comment: $type.summary /}
                  {param omitLeadingTag: true /}
                {/call}
              {else}
                No Description.
              {/if}
          {/foreach}
        </dl>
      {/if}

      {if length($spec.type.typeDef) > 0}
        <h2>Type Definitions</h2>
        <dl>
          {foreach $typedef in $spec.type.typeDef}
            <dt>
              <a id="{$typedef.name}"></a>
              <a href="{$typedef.href}">{$typedef.name}</a>
              <code>{$typedef.typeHtml |noAutoescape}</code>
            <dd>
              {if $typedef.description and length($typedef.description.token)}
                {call .comment}
                  {param comment: $typedef.description /}
                  {param omitLeadingTag: true /}
                {/call}
              {else}
                No description.
              {/if}
            /* TODO: deprecation notice $typedef.deprecation*/
          {/foreach}
        </dl>
      {/if}

    </article>
    {call .sideNav}
      {param index: $spec.index /}
    {/call}
  </main>
  {call .footer}
    {param resources: $spec.resources /}
  {/call}
{/template}


/**
 * Generates the main index.
 */
{template .indexFile}
  {@param spec: dossier.IndexFileRenderSpec}

  {call .pageHeader}
    /* TODO(jleyba): title should be configurable. */
    {param title: 'Index' /}
    {param resources: $spec.resources /}
  {/call}

  <main>
    <article class="indexfile">
      {if $spec.readme and length($spec.readme.token)}
        {call .comment}
          {param comment: $spec.readme /}
          {param omitLeadingTag: true /}
        {/call}
       {else}
        <strong>TODO</strong>
       {/if}
    </article>
    {call .sideNav}
      {param index: $spec.index /}
    {/call}
  </main>

  {call .footer}
    {param resources: $spec.resources /}
  {/call}
{/template}


/**
 * Generates an HTML page for displaying the contents of a JavaScript source
 * file.
 */
{template .srcfile}
  {@param spec: dossier.SourceFileRenderSpec}

  {call .pageHeader}
    {param title: $spec.file.baseName /}
    {param resources: $spec.resources /}
  {/call}

  <main>
    <article class="srcfile">
    <h1>{$spec.file.path}</h1>

    <pre>
      <code>
        <table>
          {let $count: 1 /}
          {foreach $line in $spec.file.lines}
            <tr>
              <td>
                <a id="l{$count}"></a>
                <a href="#l{$count}">{$count}</a>
              <td>{$line}
            {let $count: $count + 1 /}
          {/foreach}
        </table>
      </code>
    </pre>

    </article>
    {call .sideNav}
      {param index: $spec.index /}
    {/call}
  </main>

  {call .footer}
    {param resources: $spec.resources /}
  {/call}
{/template}